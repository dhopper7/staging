<!DOCTYPE html>
<html>
<head> 
	<topictype value="TOPIC" />
	<title>Editing Options</title>
	<link rel="stylesheet" type="text/css" href="templates/wwhelp.css">
		  <script src="templates/jquery.min.js" type="text/javascript"></script>
	<script src="../../../jqSuite/documentation/html/templates/wwhelp.js" type="text/javascript"></script>
	<script>
		// fix up code examples to display tabs	
			  $(function() { $("#example").codeExampleTabs(); });
	</script>
</head>
<body>
<div class="banner">
  <div>
	<span class="projectname">jqSuite php documentation</span>
 </div>
 <div class="topicname">
	<img src="bmp/topic.gif">&nbsp;Editing Options
 </div>
</div>

<div class="contentpane">

<div class="contentbody" id="body">One of the key reasons for displaying data in a grid is to edit it, quickly and easily. jqGrid supports editing data in three ways:<p><ol>

<li> cell editing: edit specific cells in a gird<br>
<li> inline editing: edit several cells in the same row<br>
<li> form editing: create a form to edit outside of the grid<br>
</ol><p>By default when to colModel is created all fields are marked as editable, where the field is represented as input of type text.<br>
If we want to disable the editing of some field we should just set the property editable to false:<p><pre>
$grid-&gt;setColProperty('somefield',array("editable"=&gt;false));
</pre><p>after the colModel is created with setColModel method.<p>All editing modules uses a common properties in colModel in order to perform editing. Below is the list of these properties with detailed description:<p><ul>

<li> editable<br>
<li> edittype<br>
<li> editoptions<br>
<li> editrules<br>
<li> formoptions (valid only in form editing)<br>
</ul><br>
The common syntax of using these options is: <p><pre>
&lt;?php
....
$grid-&gt;setColModel(...);
$grid-&gt;setColProperty('somefield',array("editable"=&gt;true, "edittype"=&gt;"text", "editoptions"=&gt;array(...), "editrules"=&gt;array(...), "formoptions"=&gt;array(...)));
...

$grid-&gt;renderGrid(...);
...
?&gt;
</pre><p><div class="banner">editable</div><p>The editable option is boolean and can have two values true or false. The option defines if this field is editable (or not). Default is true. To make a field non editable, set this to false: editable=&gt;false.<br>
We should mention that the hidden fields are not editable instead that they have been marked as editable. In in-line and cell editing modules you should show these fields (using showCol method) in order to edit it. In form editing module you should use editrules option (see below)<p><div class="banner">edittype</div><p>Edittype option defines the type of of the editable field. Possible values: 'text', 'textarea', 'select', 'checkbox', 'password', 'button', 'image', 'file' and 'custom'. The default value is 'text'.<p><b>text</b><p>When edittype is 'text', jqGrid constructs a input tag of type text:<p>&lt;input type="text" ...../&gt;<p>In editoptions we can set all the possible attributes for this field. For example,<p>... "editoptions"=&gt;array("size"=&gt;10, "maxlength"=&gt; 15).....<p>will cause jqGrid to construct the following input<p>&lt;input type="text" size="10" maxlength="15" /&gt;<p>In addition to the these settings, jqGrid adds the id and name attribute.<p><b>textarea</b><p>When edittype is 'textarea', jqGrid constructs a input tag of type textarea<p>&lt;input type="textarea" .../&gt;<p>In editoptions we can add additional attributes to this type. Typically, these govern the size of the box:<p>... "editoptions"=&gt;array("rows"=&gt;3, "cols"=&gt; 20).....<p>&lt;input type="textarea" rows="3" cols="20".../&gt;<p>To these attributes jqGrid adds id and name attributes .<p><b>checkbox</b><p>When edittype is 'checkbox', jqGrid constructs a input tag as follows:<p>&lt;input type="checkbox" .../&gt;<p>editoptions is used to define the checked and unchecked values. The first value is checked. For example<p>..."editoptions"=&gt;array("value"=&gt;"Yes:No" )...<p>This will construct<p>&lt;input type="checkbox" value="Yes" offval="No".../&gt;<p>defines a checkbox in which when the value is Yes the checkbox becomes checked, otherwise unchecked. This value is passed as parameter to the editurl.<p>If in the editoptions the value property is not set jqGrid search for the following values (false|0|no|off|undefined) in order to construct checkbox. If the cell content does not contain one of these values then the value attribute becomes the cell content and offval is set to off.<br>
Example if the cell content is true, then<br>
&lt;input type="checkbox" value="true" offval="off" checked.../&gt;<br>
To these attributes jqGrid adds id and name attributes .<p><b>select</b><p>When edittype is 'select', jqGrid constructs a input tag as follows:<p>&lt;select&gt; <br>
&lt;option value='val1'&gt; Value1 &lt;/option&gt; <br>
&lt;option value='val2'&gt; Value2 &lt;/option&gt; <br>
... <br>
&lt;option value='valn'&gt; ValueN &lt;/option&gt; <br>
&lt;/select&gt;<p>To construct this element we have two possible variants<p><ul>

<li> Using the setSelect method <br>
<li> Setting editoptions dataUrl parameter<br>
</ul><br>
The method setSelect will be considered later (link)<p>The editoptions dataUrl parameter is valid only for element of edittype:select. The dataUrl parameter represent the url from where the html select element should be get.<br>
When this option is set, the element will be filled with values from the ajax request. The data should be a valid html select element with the desired options - something like:<p>&lt;select&gt; <br>
&lt;option value='1'&gt;One&lt;/option&gt; <br>
&lt;option value='2'&gt;Two&lt;/option&gt; <br>
...<br>
&lt;/select&gt;<p>To this element, jqGrid adds the id and name attributes as above.<br>
The corresponding script cam look like this:<p><pre>
...
$grid-&gt;setColProperty('somename',array('edittype'=&gt;'select','editoptions'=&gt;array('dataUrl'=&gt;'some_url')));
...
</pre><p>Multiple selection of options in a select box is also possible. Also the size attribute can be added too<br>
<pre>
...
$grid-&gt;setColProperty('somename',array('edittype'=&gt;'select','editoptions'=&gt;array("multiple"=&gt;true,"size"=&gt;3,...)));
...
</pre><p><br>
<b>password</b><p>When edittype is 'password', jqGrid constructs a input tag of type text:<p>&lt;input type="password" ...../&gt;<p>In editoptions we can set all the possible attributes for this field. For example,<p>... "editoptions"=&gt;array("size"=&gt;10, "maxlength"=&gt; 8).....<p>will cause jqGrid to construct the following input<p>&lt;input type="password" size="10" maxlength="8" /&gt;<p>In addition to the these settings, jqGrid adds the id and name attribute.<p><b>button</b><p>When edittype is 'button', jqGrid constructs a input tag of type text:<p>&lt;input type="button" ...../&gt;<p>In editoptions we can set all the possible attributes for this field. For example,<p>... "editoptions"=&gt;array("value"=&gt;"MyButton").....<p><br>
will cause jqGrid to construct the following input<p>&lt;input type="button" value="MyButton" /&gt;<p>In addition to the these settings, jqGrid adds the id and name attribute.<p><br>
<b>image</b><p>When edittype is 'image', jqGrid constructs a input tag of type text:<p>&lt;input type="image" ...../&gt;<p>In editoptions we can set all the possible attributes for this field. For example,<p>... "editoptions"=&gt;array("src"=&gt;"path_to_my_image").....<p>will cause jqGrid to construct the following input<p>&lt;input type="image" src="path_to_my_image" /&gt;<p>In addition to the these settings, jqGrid adds the id and name attribute.<p><br>
<b>file</b><p>When edittype is 'file', jqGrid constructs a input tag of type text:<p>&lt;input type="file" ...../&gt;<p>In editoptions we can set all the possible attributes for this field. For example,<br>
... "editoptions"=&gt;array("alt"=&gt;"Alt text").....<p>will cause jqGrid to construct the following input<p>&lt;input type="file" alt="Alt text"... /&gt;<p>In addition to the these settings, jqGrid adds the id and name attribute.<p><div class="updatenotice">When this element is created (usually in form editing) the form does not become ENCTYPE=“multipart/form-data” in order to upload the file. You should apply another plugin for this purpose - Ajax File Upload plugin works fine.<br>
</div><p><b>custom</b><br>
This edit type allow definition of custom editable element. When edit type is set to custom we should provide a set of functions which should to create the element, and get the value from it in order to be posted to the server.<br>
Functions that should be defined:<p>   1. custom_element - this function is used to create the element. The function should return the new DOM element. Parameters passed to this function are the value and the editoptions from colModel.<br>
   2. custom_value - this function should return the value from the element after the editing in order to post it to the server. Parameter passed to this function is the element object<p>When the custom element is created we automatically do the following additinal tasks:<p>   1.add a class 'customelement'<br>
   2.add attribute name with name from colModel<br>
   3.add id according to the rules for every edited module.<p>See example on how to construct custom element<p><br>
<div class="banner">editoptions</div><p>editoptions property is array which contain important information about the editing column. It is important to note that in editoptins array you can set any valid attribute for the chosen edittype.<p>Below is the list of most commonly used options: <br>

<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Property</P>
		</TH>
		<TH>
			<P>Type</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>value</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD>
			When set for edittype checkbox this value should be
			a string with two possible values separated with a colon (:) -
			Example "editoptions"=>array("value"=>&ldquo;Yes:No&rdquo;) where the first
			value determines the checked property. <BR> When set for edittype
			select value can be a string, object or function.<BR> If the
			option is a string it must contain a set of value:label pairs with
			the value separated from the label with a colon (:) and ended
			with(;). The string should not ended with a (;)-
			"editoptions"=>array("value"=>&ldquo;1:One;2:Two&rdquo;). When defined as
			function - the function should return either formated string or
			object. <BR> In all other cases this is the value of the input
			element if defined.
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>dataUrl</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option is valid only for the elements of type
			select - i.e., edittype:select and should represent the url for
			getting the data that should contain the select definition. The
			data is obtained via ajax call and should be a valid html select
			element with the desired options &lt;select&gt;&lt;option
			value='1'&gt;One&lt;/option&gt;&hellip;&lt;/select&gt;. In this
			case you can use option group. <BR> The ajax request is called
			only once when the element is created. <BR> In inline edit or cell
			edit module it is called every time when you edit a new row or
			cell. In form edit module only once.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>buildSelect</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>function</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option have sense only if the dataUrl parameter
			is set. In case where the server response can not build the select
			element you can use your on function to build the select. The
			function should return a string containing the select and options
			value(s) as described in dataUrl option. Parameter passed to this
			function is the server response. This function should be created like this 
			"editoptions"=>array("buildSelect"=>"js:function(response){...}",..)</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>dataInit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>function</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>To this function, if defined, we pass the element
			object. This function is called only once when the element is
			created. The event is called only once when the element is created. <BR> In inline
			edit or cell edit module it is called every time when you edit a
			new row or cell. In form edit module only once.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>dataEvents</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>list of events to apply to the data element; uses jQuery bind like 
			$(&rdquo;#id&rdquo;).bind(type, [data], fn) to bind events to data
			element. 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>defaultValue</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The option can be string or function. This option is
			valid only in Form Editing module when used with editGridRow
			method in add mode. If defined the input element is set with this
			value if only element is empty. If used in selects the text should
			be provided and not the key. Also when a function is used the
			function should return value.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>NullIfEmpty</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If the property is set to true the empty values from inline and form editing are set/added into the database as NULLs.</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>other options</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>In this case you can set any other valid attribute
			for the editable element. By Example if the element is
			edittype:'text' we can set size, maxlenght and etc. attributes.
			Refer to the valid attributes of of the element</P>
		</TD>
	</TR>
</TABLE>
<p><div class="banner">editrules</div>

This option add additional properties to the editable element and should be used in colModel. Mostly it is used to validate the user input before submitting the value(s) to the server.<p>Syntax:<br>
<pre>
&lt;?php
....
$grid-&gt;setColModel(...);
$grid-&gt;setColProperty('somefield',array("editable"=&gt;true, "editrules"=&gt;array("edithidden"=&gt;true, "required"=&gt;true...), ..));
...

$grid-&gt;renderGrid(...);
...
?&gt;
</pre>

Below is the list of available options:<br>

<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Option</P>
		</TH>
		<TH>
			<P>Type</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>edithidden</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option is valid only in form editing module. By
			default the hidden fields are not editable. If the field is hidden
			in the grid and edithidden is set to true, the field can be edited
			when add or edit methods are called.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>required</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>(true or false) if set to true, the value will be
			checked and if empty, an error message will be displayed.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>number</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>(true or false) if set to true, the value will be
			checked and if this is not a number, an error message will be
			displayed.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>(true or false) if set to true, the value will be
			checked and if this is not a integer, an error message will be
			displayed.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>minValue</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>number(integer)</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set, the value will be checked and if the value
			is less than this, an error message will be displayed.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>maxValue</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>number(integer)</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set, the value will be checked and if the value
			is more than this, an error message will be displayed.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>email</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set to true, the value will be checked and if
			this is not valid e-mail, an error message will be displayed</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>url</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set to true, the value will be checked and if
			this is not valid url, an error message will be displayed</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>date</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set to true a value from datefmt option is get
			(if not set ISO date is used) and the value will be checked and if
			this is not valid date, an error message will be displayed</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>time</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set to true, the value will be checked and if
			this is not valid time, an error message will be displayed.
			Currently we support only hh:mm format and optional am/pm at the
			end</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>custom</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set to true allow definition of the custom
			checking rules via a custom function. See below</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>custom_func</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>function</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>this function should be used when a custom option is
			set to true. Parameters passed to this function are the value,
			which should be checked and the name - the property from colModel.
			The function should return array with the following parameters:
			first parameter - true or false. The value of true mean that the
			checking is successful false otherwise; the second parameter have
			sense only if the first value is false and represent the error
			message which will be displayed to the user. Typically this can
			look like this [false,&rdquo;Please enter valid value&rdquo;]</P>
		</TD>
	</TR>
</TABLE>
<p><div class="banner">formoptions</div><p>This option is valid only in form editing. The purpose of these options is to reorder the elements in the form and to add some information before and after the editing element. Should be used in colModel array. Syntax: <p><pre>
&lt;?php
....
$grid-&gt;setColModel(...);
$grid-&gt;setColProperty('somefield',array("editable"=&gt;true, "formoptions"=&gt;array("elmprefix"=&gt;"(*)", "rowpos"=&gt;1, "colpos"=&gt;2), ..));
...

$grid-&gt;renderGrid(...);
...
?&gt;
</pre><p>Below is a list of available options<p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Option</P>
		</TH>
		<TH>
			<P>Type</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>elmprefix</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set, a text or html content appears before the
			input element</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>elmsuffix</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set, a text or html content appears after the
			input element</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>label</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>if set, this replace the name from colNames array
			that appears as label in the form.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>rowpos</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>number</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines the row position of the element (again
			with the text-label) in the form; the count begins from 1</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>colpos</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>number</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines the column position of the element (again
			with thelabel) in the form beginning from 1 
			</P>
		</TD>
	</TR>
</TABLE>
<p><div class="notebox">Two elements can have equal row position, but different column position. This will place the two elements in one row on the form. </div>


</div>


</div><hr />
<div class="footer">
	Last Updated: 02/22/12 | 
	&copy TriRand Ltd, 2012
</div>
<br class="clear" />
<br />
</body>
</html>