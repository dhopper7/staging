<!DOCTYPE html>
<html>
<head> 
	<topictype value="TOPIC" />
	<title>Form Editing</title>
	<link rel="stylesheet" type="text/css" href="templates/wwhelp.css">
		  <script src="templates/jquery.min.js" type="text/javascript"></script>
	<script src="../../../jqSuite/documentation/html/templates/wwhelp.js" type="text/javascript"></script>
	<script>
		// fix up code examples to display tabs	
			  $(function() { $("#example").codeExampleTabs(); });
	</script>
</head>
<body>
<div class="banner">
  <div>
	<span class="projectname">jqSuite php documentation</span>
 </div>
 <div class="topicname">
	<img src="bmp/topic.gif">&nbsp;Form Editing
 </div>
</div>

<div class="contentpane">

<div class="contentbody" id="body">jqGrid supports creating a form “on the fly” to view, add, edit, or delete grid data. The methods listed below are included in the navGrid (navigator method) <br>
By default navigaror is disabled. To enable navigator just set the navigator variable to true<p><pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>With this action we enable the following actions in pager - add, edit, del, search, refresh, export to excel.<br>
The view action is disabled.<br>
To disable some action in navigator use setNavOptions method specifiyng the word navigator. If by example we want to disable adding of records do this<p><pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGridRender instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'navigator'</span>,<span class="datatypes">array</span>(<span class="codestring">'add'</span>=&gt;<span class="literals">false</span>));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>To change a option in some module use the following methods<p><b>setNavOptions(...)<br>
setNavEvent(...)</b><p>with first parameter refering to the desired module.<br>
By example if we want to change the width and height of the form and want this to be constant in editing adding records do the following.<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGridRender instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'edit'</span>,<span class="datatypes">array</span>(<span class="codestring">"width"</span>=&gt;500, <span class="codestring">"height"</span>=&gt;300, <span class="codestring">"recreateForm"</span>=&gt;<span class="literals">true</span>));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p><div class="banner">editGridRow</div>

Editing by default is disabled when the grid is created. To enable set navigator variable to true.<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;renderGrid(...);
?&gt;</div></pre>

To disable a editing in already created navigator you should use navigator property to disable the method<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'navigator'</span>,araray(<span class="codestring">"edit"</span>=&gt;<span class="literals">false</span>));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>To set a particular option and event in the edit form use <p><b>setNavOptions(...)<br>
setNavEvent(...)</b><p>with first parameter edit. i.e<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'edit'</span>,araray(...));
$grid-&gt;setNavEvent(<span class="codestring">'edit'</span>,araray(...));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p><br>
To call a method in custom java script code use the following convension.<br>
<pre><div class="csharpcode">jQuery(<span class="codestring">"#grid_id"</span>).jqGrid(<span class="codestring">'editGridRow'</span>, rowid, properties );</div></pre>

Where<p><ul>

<li> grid_id: the id of the parent grid<br>
<li> rowid: the id of the row to edit<br>
<li> properties: an array of key =&gt; value pairs, including any of the following properties or events.<br>
</ul><p>The method uses the following properties from language file:<p><pre><div class="csharpcode">$.jgrid = {
...
   edit : {
      addCaption: <span class="codestring">"Add Record"</span>,
      editCaption: <span class="codestring">"Edit Record"</span>,
      bSubmit: <span class="codestring">"Submit"</span>,
      bCancel: <span class="codestring">"Cancel"</span>,
      bClose: <span class="codestring">"Close"</span>,
      saveData: <span class="codestring">"Data has been changed! Save changes?"</span>,
      bYes : <span class="codestring">"Yes"</span>,
      bNo : <span class="codestring">"No"</span>,
      bExit : <span class="codestring">"Cancel"</span>,
...
   },
...
}</div></pre><p>These options can be overwritten when passed as options to the method. When passed to the method we should use by example "bSubmit" =&gt; “Submit” and not "$.jgrid.edit.bSubmit" =&gt; “Submit”<p><b>Properties</b><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Property</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
		<TH>
			<P>Default</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>top</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the initial top position of modal dialog. The
			default value of 0 mean the top position from the upper left
			corner of the grid. When jqModal option is true (see below) and
			jqModal plugin is present any value different from 0 mean the top
			position from upper left corner of the window. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>left</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the initial left position of modal dialog. The
			default value of 0 mean the left position from the upper left
			corner of the grid. When jqModal option is true (see below) and
			jqModal plugin is present any value different from 0 mean the left
			position from upper left corner of the window. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>width</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the width of confirmation dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>300</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>height</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the entry height of confirmation dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>auto</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>dataheight</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the parameter control the scrolling content - i.e
			between the modal header and modal footer.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>auto</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>modal</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines if the dialog will be modal. Also works
			only if jqModal plugin is present</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>overlay</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the overlay of the modal. Also works
			only if jqModal plugin is present</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>10</P>
		</TD>
	</TR>


	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>drag</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines if the dialog is dragabale. Works only if
			jqDnR plugin is present or if the dragable widget is present from
			jQuery UI</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>resize</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines if the dialog can be resized. Works only
			is jqDnR plugin is available or resizable widget is present from
			jQuery UI</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>url</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>url where to post data. If set, replaces the editurl</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>mtype</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines the type of request to make (&ldquo;POST&rdquo;
			or &ldquo;GET&rdquo;) when data is sent to the server</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>POST</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>editData</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>an array used to add content to the data posted to
			the server</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>recreateForm</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>when set to true the form is recreated every time
			the dialog is activeted with the new options from colModel (if
			they are changed)</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>jqModal</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set to true uses jqModal plugin (if present) to
			creat the dialogs. If set to true and the plugin is not present
			jqGrid uses its internal function to create dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>addedrow</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Controls where the row just added is placed: 'first'
			at the top of the gird, 'last' at the bottom. Where the new row is
			to appear in its natural sort order, set reloadAfterSubmit: true</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>first</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>topinfo</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set this information is placed just after the
			modal header as additional row</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>bottominfo</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set this information is placed just after the
			buttons of the form as additional row</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>saveicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>array. Determines the icon of the submit button. The
			default value is [true,&rdquo;left&rdquo;,&rdquo;ui-icon-disk&rdquo;].
			The first item enables/disables the icon. The second item tells
			where to put the icon to left or to right of the text. The third
			item corresponds to valid ui icon from theme roller 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>closeicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Array. Determines the icon of the cancel button. The
			default values are [true,&rdquo;left&rdquo;,&rdquo;ui-icon-close&rdquo;].
			For description of these see saveicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>savekey</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>array. Determines the possibility to save the form
			with pressing a certain key.The first item enables/disables saving
			with pressing certain key. The second item corresponds to key code
			for saving. If enabled the default value for saving is [Enter]. <BR>
			Note that this binding should be used for both adding and editing
			a row. Since the binding is for the form, there is no possibility
			to have one key in add and another in edit mode. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>[false,13]</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>navkeys</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>array. This option works only in edit mode and add
			keyboard navigation, which allow us to navigate through the
			records while in form editing pressing certain keys. The default
			state is disabled. The first item enables/disables the navigation.
			The second item corresponds to reccord up and by default is the
			the key code for Up key. The third item corresponds to reccord
			down and by default is the key code for Down key</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>[false,38,40]</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>checkOnSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option work only in editing mode. If Set to
			true this option will work only when a submit button is clicked
			and if any data is changed in the form. If the data is changed a
			dilog message appear where the user is asked to confirm the
			changes or cancel it. Pressing cancel button of the new dialog
			will return to the form, but does not set the values to its
			original state.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>checkOnUpdate</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option is applicable in add and edit mode. When
			this option is set to true the behaviour as follow: <BR> when
			something is changed in the form and the user click on Cancel
			button, navigator buttons, close button (on upper right corner of
			the form), in overlay (if available) or press Esc key (if set) a
			message box appear asking the user to save the changes, not to
			save the changes or go back in the grid cancel all changes (this
			will close the modal form)</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>closeAfterAdd</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>when add mode, close the dialog after add record</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>clearAfterAdd</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>when add mode, clear the data after adding data</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>closeAfterEdit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>when in edit mode, close the dialog after editing</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>reloadAfterSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>reload grid data after posting</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>closeOnEscape</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set to true the modal window can be closed with
			ESC key from the user.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>ajaxEditOptions</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option allow to set global ajax settings for
			the form editiing when we save the data to the server. Note that
			with this option is possible to overwrite all current ajax setting
			in the save request including the complete event.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>viewPagerButtons</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option enable or disable the appearing of the
			previous and next buttons (pager buttons) in the form 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
</TABLE>
<p><b>Events</b><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Event</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterclickPgButtons</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event can be used only when we are in edit mode
			and the navigator buttons are enabled; it fires after the data for
			the new row is loaded from the grid, allowing modification of the
			data or form before the form is redisplayed. <BR>
			afterclickPgButtons : function(whichbutton, formid, rowid) {&hellip;}
			<BR> where <BR> <EM>whichbutton</EM> is either 'prev' or 'next' <BR>
			<EM>formid</EM> is the id of the form <BR> <EM>rowid</EM> is the
			id of the current row 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterComplete</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event fires immediately after all actions and
			events are completed and the row is inserted or updated in the
			grid. <BR> afterComplete : function (response, postdata, formid)
			{&hellip;} <BR> where <BR> <EM>response</EM> is the data returned
			from the server (if any) <BR> <EM>postdata</EM> an array, is the
			data sent to the server <BR> <EM>formid</EM> is the id of the form
						</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterShowForm</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires after showing the form; receives as Parameter
			the id of the constructed form. <BR> afterShowForm : finction
			(formid) {&hellip;} 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires after response has been received from server.
			Typically used to display status from server (e.g., the data is
			successfully saved or the save cancelled for server-side editing
			reasons). Receives as parameters the data returned from the
			request and an array of the posted values of type
			id=value1,value2. <BR> When used this event should return array
			with the following items [success, message, new_id] <BR> where <BR>
			<EM>success</EM> is a boolean value if true the process continues,
			if false a error <EM>message</EM> appear and all other processing
			is stopped. (message is ignored if success is true). <BR> <EM>new_id</EM>
			can be used to set the new row id in the grid when we are in add
			mode. <BR> afterSubmit : function(response, postdata) <BR> { <BR>
			&hellip; <BR> return [success,message,new_id] <BR> } 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeCheckValues</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event fires before checking the values (if
			checking is defined in colModel via editrules option). <BR> To
			this event we pass the following parameters: <BR> 1. <EM>posdata</EM>
			- the array of values which should be chaced in name:value pair,
			where the name is the name from colModel. <BR> 2. <EM>formid</EM>
			- the form id object. <BR> 3. <EM>mode</EM> - the current mode in
			which we are - can be add or edit. <BR> In all cases the event
			should return object in name value pair which then will be posted
			to the server.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeInitData</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires before initialize the new form data. Receives,
			as parameter, the id of the constructed form. <BR> beforeInitData
			: function(formid) {&hellip;} 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeShowForm</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires before showing the form with the new data;
			receives as Parameter the id of the constructed form. <BR>
			beforeShowForm : function(formid) {&hellip;} 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires before the data is submitted to the server.
			Recieves as parameter the posted data array and the formid. <BR>
			beforeSubmit : function(postdata, formid) { <BR> &hellip; <BR>
			return[success,message]; <BR> } <BR> When defined this event
			should return array with the following values <BR> <EM>success</EM>
			boolean indicating if the proccess should continue (true) or a
			error (false) <EM>message</EM> should appear to the user</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onclickPgButtons</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event can be used only when we are in edit
			mode; it fires immediately after the previous or next button is
			clicked, before leaving the current row, allowing working with
			(e.g., saving) the currently loaded values in the form. <BR>
			onclickPgButtons : function (whichbutton, formid, rowid) {&hellip;}
			<BR> where <BR> <EM>whichbutton</EM> is either 'prev' or 'next' <BR>
			<EM>formid</EM> is the id of the form <BR> <EM>rowid</EM> is the
			id of the current row 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onclickSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires after the submit button is clicked and the
			postdata is constructed. Parameters passed to this event are: a
			options array of the method and the posted data array. The event
			should return array of type {} which extends the postdata array. <BR>
			onclickSubmit : function(params, posdata) { <BR> &hellip; <BR>
			return {add_data} <BR> }</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onInitializeForm</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires only once when creating the data for editing
			and adding. Receives, as parameter, the id of the constructed
			form. <BR> onInitializeForm : function(formid) {&hellip;}</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onClose</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event is called just before closing the form
			and when a close icon is clicked, a cancel button is clicked, ESC
			key is pressed or click on overlay (if jqModal is present). The
			event can return (optionally) true or false. If the return value
			is true the form is closed, if false the form does not close. If
			nothing is returned the form is closed</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>errorTextFormat</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The event (can) fire when error occurs from the ajax
			call and can be used for better formatting of the error messages.
			To this event is passed response from the server. The event should
			return single message (not array), which then is displayed to the
			user.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>serializeEditData</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set this event can serialize the data passed to
			the ajax request when we save a form data. The function should
			return the serialized data. This event can be used when a custom
			data should be passed to the server - e.g - JSON string, XML
			string and etc. To this event is passed the data which will be
			posted to the server</P>
		</TD>
	</TR>
</TABLE>
<p>How is the form constructed<p>When the form is constructed we set the following rules:<p><ul>

<li> Hidden fields are included in the form with the display:none property of the table row<br>
<li> The id of the editable element is constructed from the name of the colModel array - propery - name<br>
<li> The name of the editable element is constructed from the name of the colModel array - propery - name<br>
<li> For ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of “tr_” + name (from colmodel). Example:<br>
</ul><p><pre><div class="htmlcode"><span class="elements">&lt;form</span> ....&gt; 
  <span class="elements">&lt;table&gt;</span> 
    <span class="elements">&lt;tr</span> <span class="attributes">id=</span><span class="codestring">'tr_myfield'</span>&gt;  
      <span class="elements">&lt;td&gt;</span> Caption<span class="elements">&lt;/td&gt;</span> <span class="elements">&lt;td&gt;</span>edited element named, in colModel, as <span class="codestring">"myfield"</span><span class="elements">&lt;/td&gt;</span> 
    <span class="elements">&lt;/tr&gt;</span> ... 
  <span class="elements">&lt;/table&gt;</span> 
<span class="elements">&lt;/form&gt;</span></div></pre>

This allow us to easily show or hide some table rows depending on conditions using beforeShowForm event<br>
What is posted to the server<p>When we are in editing mode the data that is posted to the server is object {} that contain:<p><ul>

<li> the name:value pair where the name is the name of the input element represented in the form (this is for all input elements)<br>
<li> additionally we add a pair id:rowid where the rowid is the id of the edited row (the name id is replaced automatically with the primaryKey name)<br>
<li> additionally we add a pair oper:edit to indicate the edit mode<br>
<li> if the editData object is not empty we extend this data with the posted data<br>
<li> if the returned object from onclickSubmit event is not empty we extend the posted data with this object<br>
</ul><p><br>
<div class="banner">Adding Row</div>

Adding by default is disabled when the grid is created. To enable set navigator variable to true.<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>To disable a adding in already created navigator you should use navigator property to disable the method<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'navigator'</span>,araray(<span class="codestring">"add"</span>=&gt;<span class="literals">false</span>));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>To set a particular option and event in the add form use <p><b>setNavOptions(...)<br>
setNavEvent(...)</b><p>with first parameter add. i.e<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'add'</span>,araray(...));
$grid-&gt;setNavEvent(<span class="codestring">'add'</span>,araray(...));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>This method uses Common Editing Properties from colModel and editurl option from jqGrid<p><br>
The <b>editGridRow</b> method is also used to add data to the server, by passing “new” as the rowid when called in custom JavaScript code<p>This method uses Common Editing Properties from colModel and editurl option from jqGrid.<p>Calling convention:<p>jQuery("#grid_id").jqGrid('editGridRow, "new", properties );<p>Where<br>
<ul>

<li> grid_id: the id of the parent grid<br>
<li> properties: an array of name: value pairs, including any of the following properties or events.<br>
</ul><p>The method uses the following properties from language file:<br>
<pre><div class="csharpcode">$.jgrid = {
...
   edit : {
      addCaption: <span class="codestring">"Add Record"</span>,
      editCaption: <span class="codestring">"Edit Record"</span>,
      bSubmit: <span class="codestring">"Submit"</span>,
      bCancel: <span class="codestring">"Cancel"</span>,
      bClose: <span class="codestring">"Close"</span>,
      saveData: <span class="codestring">"Data has been changed! Save changes?"</span>,
      bYes : <span class="codestring">"Yes"</span>,
      bNo : <span class="codestring">"No"</span>,
      bExit : <span class="codestring">"Cancel"</span>,
...
   },
...
}</div></pre><p>The options are the same as those in editng row - See above. <p>How is the form constructed<p>When the form is constructed we set the following rules:<br>
<ul>

<li> Hidden fields are included in the form with the display:none property of the table row<br>
<li> The id of the editable element is constructed from the name of the colModel array - propery - name<br>
<li> The name of the editable element is constructed from the name of the colModel array - propery - name<br>
<li> For ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of “tr_” + name (from colmodel). Example:<br>
</ul><br>
<pre><div class="htmlcode"><span class="elements">&lt;form</span> ....&gt; 
  <span class="elements">&lt;table&gt;</span> 
    <span class="elements">&lt;tr</span> <span class="attributes">id=</span><span class="codestring">'tr_myfield'</span>&gt;  
      <span class="elements">&lt;td&gt;</span> Caption<span class="elements">&lt;/td&gt;</span> <span class="elements">&lt;td&gt;</span>edited element named, in colModel, as <span class="codestring">"myfield"</span><span class="elements">&lt;/td&gt;</span> 
    <span class="elements">&lt;/tr&gt;</span> ... 
  <span class="elements">&lt;/table&gt;</span> 
<span class="elements">&lt;/form&gt;</span></div></pre><p>This allow us to easily show or hide some table rows depending on conditions using beforeShowForm event<br>
What is posted to the server<p>When we are in add mode the data that is posted to the server is object {} that contain:<p><ul>

<li> the name:value pair where the name is the name of the input element represented in the form (this is for all input elements)<br>
<li> additionally we add a pair id:_empty where the _empty indicates that new row is inserted<br>
<li> additionally we add a pair oper:add to indicate the add mode<br>
<li> if the editData object is not empty we extend this data with the posted data<br>
<li> if the returned object from onclickSubmit event is not empty we extend the posted data with this object<br>
</ul><p><p><br>
<div class="banner">viewGridRow</div>

This method is similar to the editGridRow method except that the fields are not editable.<br>
View by default is disabled when the grid is created. To enable set navigator variable to true and navigator property to enable the method<p><pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'navigator'</span>,araray(<span class="codestring">"view"</span>=&gt;<span class="literals">true</span>));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>To set a particular option and event in the view form use <p><b>setNavOptions(...)<br>
setNavEvent(...)</b><p>with first parameter view. i.e<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'view'</span>,araray(...));
$grid-&gt;setNavEvent(<span class="codestring">'view'</span>,araray(...));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p><br>
To call a method in custom java script code use the following convension.<br>
<pre><div class="csharpcode">jQuery(<span class="codestring">"#grid_id"</span>).jqGrid(<span class="codestring">'viewGridRow'</span>, rowid, properties );</div></pre>

Where<p><ul>

<li> grid_id: the id of the parent grid<br>
<li> rowid: the id of the row to edit<br>
<li> properties: an array of name: value pairs, including any of the following properties or events.<br>
</ul><p>The method uses the following properties from language file:<br>
<pre><div class="csharpcode">$.jgrid = {
...
   view : {
      caption: <span class="codestring">"View Record"</span>,
      bClose: <span class="codestring">"Close"</span>
   },
...</div></pre><p><b>Properties</b><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Property</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
		<TH>
			<P>Default</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>top</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the initial top position of modal dialog. The
			default value of 0 mean the top position from the upper left
			corner of the grid. When jqModal option is true (see below) and
			jqModal plugin is present any value different from 0 mean the top
			position from upper left corner of the window. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>left</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the initial left position of modal dialog. The
			default value of 0 mean the left position from the upper left
			corner of the grid. When jqModal option is true (see below) and
			jqModal plugin is present any value different from 0 mean the left
			position from upper left corner of the window. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>width</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the width of confirmation dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>300</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>height</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the entry height of confirmation dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>auto</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>dataheight</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the parameter control the scrolling content - i.e
			between the modal header and modal footer.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>auto</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>modal</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines if the dialog will be modal. Also works
			only if jqModal plugin is present</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>drag</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines if the dialog is dragabale. Works only if
			jqDnR plugin is present or if the dragable widget is present from
			jQuery UI</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>resize</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines if the dialog can be resized. Works only
			is jqDnR plugin is available or resizable widget is present from
			jQuery UI</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>jqModal</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set to true uses jqModal plugin (if present) to
			creat the dialogs. If set to true and the plugin is not present
			jqGrid uses its internal function to create dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>topinfo</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set this information is placed just after the
			modal header as additional row</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>bottominfo</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set this information is placed just after the
			buttons of the form as additional row</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>closeicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Array. Determines the icon of the cancel button. The
			default values are [true,&rdquo;left&rdquo;,&rdquo;ui-icon-close&rdquo;].
			For description of these see saveicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>navkeys</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>array. This option works only in edit mode and add
			keyboard navigation, which allow us to navigate through the
			records while in form editing pressing certain keys. The default
			state is disabled. The first item enables/disables the navigation.
			The second item corresponds to reccord up and by default is the
			the key code for Up key. The third item corresponds to reccord
			down and by default is the key code for Down key</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>[false,38,40]</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>closeOnEscape</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set to true the modal window can be closed with
			ESC key from the user.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>labelswidth</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Since we construct the view with table element it is
			difficult to calculate, in this case, how much width is needed for
			the labels. Depending on the needs this value can be increased or
			decreased</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>30%</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>viewPagerButtons</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option enable or disable the appearing of the
			previous and next buttons (pager buttons) in the form 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
</TABLE>
<p><b>Events</b><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Event</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onClose</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event is called just before closing the form
			and when a close icon is clicked, a cancel button is clicked, ESC
			key is pressed or click on overlay (if jqModal is present). The
			event can return (optionally) true or false. If the return value
			is true the form is closed, if false the form does not close. If
			nothing is returned the form is closed</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeShowForm</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires before showing the form with the new data;
			receives as Parameter the id of the constructed form. <BR>
			beforeShowForm : function(formid) {&hellip;} 
			</P>
		</TD>
	</TR>
</TABLE>
<p>When the form is constructed we set the following rules:<p><ul>

<li> No input elements are created<br>
<li> Hidden fields are included in the form with the display:none property of the table row<br>
<li> The id of the viewed element is constructed from “v_” + the name of the colModel array - propery - name<br>
<li> For ease in manipulating the elements in an edit form, every table row in the form that holds the data for the edit has a id which is a combination of “trv_” + name (from colmodel). Example:<br>
</ul><p><pre><div class="htmlcode"><span class="elements">&lt;form</span> ....&gt; 
  <span class="elements">&lt;table&gt;</span> 
    <span class="elements">&lt;tr</span> <span class="attributes">id=</span><span class="codestring">'trv_myfield'</span>&gt;  
      <span class="elements">&lt;td&gt;</span> Caption<span class="elements">&lt;/td&gt;</span> <span class="elements">&lt;td</span> <span class="attributes">id=</span><span class="codestring">"v_myfield"</span>&gt;<span class="elements">&lt;span&gt;</span>content of<span class="codestring">"myfield"</span><span class="elements">&lt;/span&gt;</span><span class="elements">&lt;/td&gt;</span> 
    <span class="elements">&lt;/tr&gt;</span> ... 
  <span class="elements">&lt;/table&gt;</span> 
<span class="elements">&lt;/form&gt;</span></div></pre><p><br>
<div class="banner">delGridRow - deleting a row</div>

With this method we can perform a delete operation at server side.<br>
This method uses colModel and editurl parameters from jqGrid <p>Deleting by default is disabled when the grid is created. To enable set navigator variable to true.<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;renderGrid(...);
?&gt;</div></pre>

To disable a deleting in already created navigator you should use navigator property to disable the method<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'navigator'</span>,araray(<span class="codestring">"del"</span>=&gt;<span class="literals">false</span>));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>To set a particular option and event in the delete form use <p><b>setNavOptions(...)<br>
setNavEvent(...)</b><p>with first parameter del. i.e<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGrid instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;navigator = <span class="literals">true</span>;
$grid-&gt;setNavOptions(<span class="codestring">'del'</span>,araray(...));
$grid-&gt;setNavEvent(<span class="codestring">'del'</span>,araray(...));
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p><br>
To call a method in custom java script code use the following convension.<br>
<pre><div class="csharpcode">jQuery(<span class="codestring">"#grid_id"</span>).jqGrid(<span class="codestring">'delGridRow'</span>, row_id_s, options );</div></pre><p>Where:<br>
<ul>

<li> grid_id: the id of the parent grid<br>
<li> row_id_s: the id of the row(s) to delete; can be a single value or list of ids separated by comma<br>
<li> options: an array of name: value pairs, including any of the following properties or events.<br>
</ul><p>The method uses the following properties from language file:<br>
<pre><div class="csharpcode">$.jgrid = {
...
   del : {
      caption: <span class="codestring">"Delete"</span>,
      msg: <span class="codestring">"Delete selected record(s)?"</span>,
      bSubmit: <span class="codestring">"Delete"</span>,
      bCancel: <span class="codestring">"Cancel"</span>
   },
...</div></pre>

These options can be overwritten when passed as options to the method. When passed to the method we should use by example "bSubmit" =&gt; “Delete” and not "$.jgrid.del.bSubmit" =&gt; “Delete” <p><b>Properties</b><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Property</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
		<TH>
			<P>Default</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>top</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the initial top position of modal dialog. The
			default value of 0 mean the top position from the upper left
			corner of the grid. When jqModal option is true (see below) and
			jqModal plugin is present any value different from 0 mean the top
			position from upper left corner of the window. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>left</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the initial left position of modal dialog. The
			default value of 0 mean the left position from the upper left
			corner of the grid. When jqModal option is true (see below) and
			jqModal plugin is present any value different from 0 mean the left
			position from upper left corner of the window. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>width</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the width of confirmation dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>300</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>height</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the entry height of confirmation dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>auto</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>dataheight</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the parameter control the scrolling content - i.e
			between the modal header and modal footer.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>auto</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>modal</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines if the dialog will be modal. Also works
			only if jqModal plugin is present</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>drag</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines if the dialog is dragabale. Works only if
			jqDnR plugin is present or if the dragable widget is present from
			jQuery UI</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>resize</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>determines if the dialog can be resized. Works only
			is jqDnR plugin is available or resizable widget is present from
			jQuery UI</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>url</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>url where to post data. If set, replaces the editurl</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>mtype</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines the type of request to make (&ldquo;POST&rdquo;
			or &ldquo;GET&rdquo;) when data is sent to the server</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>POST</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>delData</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>an array used to add content to the data posted to
			the server</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>jqModal</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set to true uses jqModal plugin (if present) to
			creat the dialogs. If set to true and the plugin is not present
			jqGrid uses its internal function to create dialog</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>delicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>array. Determines the icon of the submit button. The
			default value is [true,&rdquo;left&rdquo;,&rdquo;ui-icon-delete&rdquo;].
			The first item enables/disables the icon. The second item tells
			where to put the icon to left or to right of the text. The third
			item corresponds to valid ui icon from theme roller 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>cancelicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Array. Determines the icon of the cancel button. The
			default values are [true,&rdquo;left&rdquo;,&rdquo;ui-icon-cancel&rdquo;].
			For description of these see delicon</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>reloadAfterSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>reload grid data after posting</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>closeOnEscape</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set to true the modal window can be closed with
			ESC key from the user.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>ajaxDelOptions</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option allow to set global ajax settings for
			the form editiing when we delete the data to the server. Note that
			with this option is possible to overwrite all current ajax setting
			in the delete request including the complete event.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
</TABLE>
<p><b>Events</b><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Event</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterComplete</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event fires immediately after all actions and
			events are completed and the row is inserted or updated in the
			grid. <BR> afterComplete : function (response, postdata, formid)
			{&hellip;} <BR> where <BR> <EM>response</EM> is the data returned
			from the server (if any) <BR> <EM>postdata</EM> an array, is the
			data sent to the server <BR> <EM>formid</EM> is the id of the form
						</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterShowForm</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires after showing the form; receives as Parameter
			the id of the constructed form. <BR> afterShowForm : finction
			(formid) {&hellip;} 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires after response has been received from server.
			Typically used to display status from server (e.g., the data is
			successfully deleted or the delete cancelled for server-side
			reasons). Receives as parameters the data returned from the
			request and an array of the posted values of type
			id=value1,value2. <BR> When used this event should return array
			with the following items [success, message] <BR> where <BR>
			<EM>success</EM> is a boolean value if true the process continues,
			if false a error <EM>message</EM> appear and all other processing
			is stoped. <BR> afterSubmit : function(response, postdata) <BR> {
			<BR> &hellip; <BR> return [succes,message] <BR> } 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeShowForm</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires before showing the form with the new data;
			receives as Parameter the id of the constructed form. <BR>
			beforeShowForm : function(formid) {&hellip;} 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires before the data is submitted to the server.
			Recieves as parameter the posted data array and the formid. <BR>
			beforeSubmit : function(postdata, formid) { <BR> &hellip; <BR>
			return[success,message]; <BR> } <BR> When defined this event
			should return array with the following values <BR> <EM>success</EM>
			boolean indicating if the proccess should continue (true) or a
			error (false) <EM>message</EM> should appear to the user</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onclickSubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires after the submit button is clicked and the
			postdata is constructed. Parameters passed to this event is a
			options array of the method. The event should return array of type
			{} which extends the postdata array. <BR> onclickSubmit :
			function(params) { <BR> &hellip; <BR> return {add_data} <BR> }</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onClose</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This event is called just before closing the form
			and when a close icon is clicked, a cancel button is clicked, ESC
			key is pressed or click on overlay (if jqModal is present). The
			event can return (optionally) true or false. If the return value
			is true the form is closed, if false the form does not close. If
			nothing is returned the form is closed</P>
		</TD>
	</TR>
</TABLE>
<p>What is posted to the server<p>When we are in delete mode the data that is posted to the server is object {} that contain:<p><ul>

<li> the pair id:rowids where the rowids can be a single value a value string separated with comma in case of multiple selection (The name id is automatically replaced with the primaryKey from scrip)<br>
<li> additionally we add a pair oper:del to indicate the delete mode<br>
<li> if the delData object is not empty we extend this data with the posted data<br>
<li> if the returned object from onclickSubmit event is not empty we extend the posted data with this object<br>
</ul><br>

</div>


</div><hr />
<div class="footer">
	Last Updated: 01/12/11 | 
	&copy TriRand Ltd, 2012
</div>
<br class="clear" />
<br />
</body>
</html>