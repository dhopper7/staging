<!DOCTYPE html>
<html>
<head> 
	<topictype value="TOPIC" />
	<title>Java Script Grid Methods</title>
	<link rel="stylesheet" type="text/css" href="templates/wwhelp.css">
		  <script src="templates/jquery.min.js" type="text/javascript"></script>
	<script src="../../../jqSuite/documentation/html/templates/wwhelp.js" type="text/javascript"></script>
	<script>
		// fix up code examples to display tabs	
			  $(function() { $("#example").codeExampleTabs(); });
	</script>
</head>
<body>
<div class="banner">
  <div>
	<span class="projectname">jqSuite php documentation</span>
 </div>
 <div class="topicname">
	<img src="bmp/topic.gif">&nbsp;Java Script Grid Methods
 </div>
</div>

<div class="contentpane">

<div class="contentbody" id="body">Below is the list of Java Script jqGrid methods. These methods can be either called with callGridMethod or setJSCode<p><br>

<TABLE WIDTH=100% BORDER=1 CELLPADDING=2 CELLSPACING=0>
	<TR VALIGN=TOP>
		<TH>
			<P>Method</P>
		</TH>
		<TH  >
			<P>Parameters</P>
		</TH>
		<TH  >
			<P>Returns</P>
		</TH>
		<TH  >
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>addRowData</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid,<BR> data, <BR> position, <BR> srcrowid</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>true on success, <BR> false otherwise 
			</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Inserts a new row with id = <EM>rowid</EM>
			containing the data in <EM>data</EM> (an object) at the <EM>position</EM>
			specified (first in the table, last in the table or before or
			after the row specified in <EM>srcrowid</EM>). The syntax of the
			data object is: {name1:value1,name2: value2&hellip;} where name is
			the name of the column as described in the colModel and the value
			is the value. <BR> This method can insert multiple rows at once.
			In this case the data parameter should be array defined as <BR>
			[{name1:value1,name2: value2&hellip;}, {name1:value1,name2:
			value2&hellip;} ] and the first option rowid should contain the
			name from data object which should act as id of the row. It is not
			necessary that the name of the rowid in this case should be a part
			from colModel. 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>clearGridData</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>clearfooter</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Clears the currently loaded data from grid. If the
			clearfooter parameter is set to true, the method clears the data
			placed on the footer row.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>delRowData</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>true on success, <BR> false otherwise</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Deletes the row with the id = <EM>rowid</EM>. This
			operation does not delete data from the server.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>footerData</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>action,<BR> data, <BR> format</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>This method gets or sets data on footer. See
			footerrow in <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:options">options</A>
			array.<BR> <EM>action</EM> - can be 'get' or 'set'. The default is
			get. 'get' returns an object of type name:value, where the name is
			a name from colModel. This will return data from the footer. The
			other two options have no effect in this case. <BR> 'set' takes a
			<EM>data</EM> array (object) and places the values in the footer.
			The object should be in name:value pair, where the name is the
			name from colModel<BR> <EM>format</EM> - default is true. This
			instruct the method to use the formatter (if set in colModel) when
			new values are set. A value of false will disable the using of
			formatter</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>getCell</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid, <BR> iCol</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>cell content</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Returns the content of the cell specified by id =
			<EM>rowid</EM> and column = <EM>iCol</EM>. iCol can be either the
			column index or the name specified in colModel.<BR> 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>getCol</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>colname, returntype, mathoperation</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>array[] or value</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>This method returns an array with the values from
			the column. <EM>colname</EM> can be either a number that
			represents the index of the column or a name from colModel.
			returntype determines the type of the returned array. When set to
			false (default) the array contain only the values. <BR> When set
			to true the array contain a set of objects. The object is defined
			as {id:rowid, value:cellvalue} where the rowid is the id of the
			row and cellvalue is the value of the cell. For example, such
			output can be [{id:1,value:1},{id:2,value:2}&hellip;] <BR> The
			valid options for mathoperation are - 'sum, 'avg', 'count'. If
			this parameter is set and is valid, the returned value is a scalar
			representing the operation applied to the all values in the
			column. If the parameter is not valid the returned value is empty
			array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>getLocalRow</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Returns an array with data of the requested id =
			<EM>rowid.</EM> from the local data array.The returned array is of type name:value, where
			the name is a name from colModel and the value from the associated
			column in that row. It returns false if the rowid can not
			be found. The difference from getRowData ia that getRowData returns data in the table, while the getLocal data
returns the data from the local data array if any.
			</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>getDataIDs</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>none</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>array[]</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>This method returns an array of the id's in the
			current grid view. It returns an empty array if no data is
			available. 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>getGridParam</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>name</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>mixed value</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Returns the value of the requested parameter. <EM>name</EM>
			is the name from the options array. If the name is not set, the
			entry options are returned. For available options, see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:options">options</A>.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>getInd</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid,<BR> rowcontent</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>This method returns the index of the row in the grid
			table specified by id= <EM>rowid</EM> when <EM>rowcontent</EM> set
			to false (default). If rowcontent is set to true, it returns the
			entry row object. If the rowid can not be found, the function
			returns false.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>getRowData 
			</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid or none</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>array{}</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Returns an array with data of the requested id =
			<EM>rowid.</EM> The returned array is of type name:value, where
			the name is a name from colModel and the value from the associated
			column in that row. It returns an empty array if the rowid can not
			be found.<BR> <BR> If the rowid is not set the method return all
			the data from the grid in array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>hideCol</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>colname<BR> or<BR> [colnames]</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Given a single colname, it hides the column with
			that name. Given an array of colnames [&ldquo;name1&rdquo;,&rdquo;name2&rdquo;],
			it hides the columns with those names, 'name1' and 'name2', in the
			example. The names in colname or colnames must all be valid names
			from the colModel. <BR> NB: The width of the grid is not changed.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>remapColumns</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>permutation, updateCells, keepHeader</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>none</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Reorder the grid columns based on the permutation
			array. The indexes of the <EM>permutation</EM> array are the
			current order, the values are the new order. By example if the
			array has values [1,0,2] after calling this method the first
			column will be reordered as second. <EM>updateCells</EM> if set to
			true will reorder the cell data. <EM>keepHeader</EM> if set to
			true will reorder the data above the header cells.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>resetSelection</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>none</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Resets (unselects) the selected row(s). Also works
			in multiselect mode.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setCaption</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>caption</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Sets a new caption of the grid. If the Caption layer
			was hidden, it is shown.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setCell</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid,<BR> colname, <BR> data, <BR> class, <BR>
			properties, <BR> forceup</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>This method can change the content of particular
			cell and can set class or style properties. Where: <BR> <EM>rowid</EM>
			the id of the row, <BR> <EM>colname</EM> the name of the column
			(this parameter can be a number (the index of the column)
			beginning from 0 <BR> <EM>data</EM> the content that can be put
			into the cell. If empty string the content will not be changed <BR>
			<EM>class</EM> if class is string then we add a class to the cell
			using addClass; if class is an array we set the new css properties
			via css <BR> <EM>properties</EM> sets the attribute properies of
			the cell, <BR> <EM>forceup</EM> If the parameter is set to true we
			perform update of the cell instead that the value is empty 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setGridParam</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Sets a particular parameter. Note - for some
			parameters to take effect a trigger(&ldquo;reloadGrid&rdquo;)
			should be executed. Note that with this method we can override
			events. The name (in the name:value pair) is the name from options
			array. For a particular options, see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:options">options</A>.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setGridHeight</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>new_height</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Sets the new height of the grid dynamically. Note
			that the height is set only to the grid cells and not to the grid.
			<EM>new_height</EM> can be in pixels, percentage, or 'auto'.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setGridWidth</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>new_width,<BR> shrink</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Sets a new width to the grid dynamically. The
			parameters are: <BR> <EM>new_width</EM> is the new width in
			pixels.<BR> <EM>shrink (true or false)</EM> has the same behavior
			as shrinkToFit - see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:options">options</A>.
			If this parameter is not set we take the value of shrinkToFit.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setLabel</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>colname, <BR> data, <BR> class, <BR> properties</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Sets a new label in the header for the specified
			column; can also set attributes and classes . The parameters are:
			<BR> <EM>colname</EM> the name of the column (this parameter can
			be a number (the index of the column) beginning from 0 <BR> <EM>data</EM>
			the content that can be put into the label. If empty string the
			content will not be changed <BR> <EM>class</EM> if class is string
			then we add a class to the label using addClass; if class is an
			array we set the new css properties via css <BR> <EM>properties</EM>
			sets the attribute properies of the label</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setRowData</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid,<BR> data, <BR> cssprop</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>true on success, <BR> false otherwise</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Updates the values (using the <EM>data</EM> array)
			in the row with <EM>rowid</EM>. The syntax of data array is:
			{name1:value1,name2: value2&hellip;} where the name is the name of
			the column as described in the colModel and the value is the new
			value. <BR> If the cssprop parameter is string we use addClass to
			add classes to the row. If the parameter is object we use css to
			add css properties. Note that we can set properties and classes
			without data, in this case we should set data to false 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>setSelection</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>rowid,<BR> onselectrow</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Toggles a selection of the row with id = <EM>rowid</EM>;
			if <EM>onselectrow</EM> is true (the default) then the event
			onSelectRow is launched, otherwise it is not.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>showCol</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>colname</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>jqGrid object</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Shows a column with a given <EM>colname</EM>. If the
			colname is a string we show only the specified column. If colname
			is array of type [&ldquo;name1&rdquo;,&rdquo;name2&rdquo;] then
			the columns with names 'name1' and 'name2' will be shown at the
			same time The names in colname must be valid names from colModel.
			The width does not change.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P ALIGN=LEFT>trigger(&ldquo;reloadGrid&rdquo;)</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>none</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>none</P>
		</TD>
		<TD  >
			<P ALIGN=LEFT>Reloads the grid with the current settings. This
			means that a new request is send to the server if datatype is xml
			or json. This method should be applied to an already-constructed
			grid. Pay attention that this method does not change HEADER
			information, that means that any changes to colModel would not be
			affected. You should use gridUnload to reload new configuration
			with different colModel</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>filterGrid</P>
		</TD>
		<TD  >
			<P>grid_id,<BR> params</P>
		</TD>
		<TD  >
			<P>HTML object</P>
		</TD>
		<TD  >
			<P>This method can be called to construct an custom search form
			for the grid and should be not applied to the grid but to a valid
			HTML element. <BR> <EM>grid_id</EM> is the id of the grid to which
			the search will be applied. <BR> <EM>parms</EM> is an array of
			parameters (see below). For more details refer to <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:custom_searching">custom
			searching</A></P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>filterToolbar</P>
		</TD>
		<TD  >
			<P>params</P>
		</TD>
		<TD  >
			<P>jqGrid object</P>
		</TD>
		<TD  >
			<P>This method is the same as filterGrid, except that the search
			input elements are placed in the grid just below the header
			elements. When the header elements are resized the input search
			elements are also resized according to the new width. Another
			difference to the filterGrid is that the filter toolbar uses
			definitions from colModel. For more information refer to <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:toolbar_searching">Toolbar
			searching</A></P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>getColProp</P>
		</TD>
		<TD  >
			<P>colname</P>
		</TD>
		<TD  >
			<P>array{}</P>
		</TD>
		<TD  >
			<P>Return an array of the properties of the given column name from
			colModel</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>GridDestroy</P>
		</TD>
		<TD  >
			<P>grid_id</P>
		</TD>
		<TD  >
			<P>true on success, <BR> false otherwise</P>
		</TD>
		<TD  >
			<P>Destroys the entry grid with id= <EM>grid_id</EM> from the DOM
			(clears all the html associated with the grid and unbinds all
			events)</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>GridUnload</P>
		</TD>
		<TD  >
			<P>grid_id</P>
		</TD>
		<TD  >
			<P>true on success, <BR> false otherwise</P>
		</TD>
		<TD  >
			<P>The only difference to previous method is that the grid is
			destroyed, but the table element and pager (if any) are left ready
			to be used again.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>setGridState</P>
		</TD>
		<TD  >
			<P>state</P>
		</TD>
		<TD  >
			<P>jGrid object</P>
		</TD>
		<TD  >
			<P>Show or hide the grid depending and state parameter. When the
			state is set to 'visible' the grid will be shown. When the
			parameter is set to 'hidden' the grid will be hidden. Note that
			the method does not call onHeaderClick event and the caption of
			the grid is allway visible</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>setColProp</P>
		</TD>
		<TD  >
			<P>colname, <BR> properties</P>
		</TD>
		<TD  >
			<P>jGrid object</P>
		</TD>
		<TD  >
			<P>Sets new properties in colModel. This method is ideal for
			dynamically changing properties of the column. Note that some
			properties - have no effect see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:colmodel_options">colModel
			options</A>. For example: <BR>
			jQuery(&rdquo;#grid_id&rdquo;).setColProp('colname',{editoptions:{value:&ldquo;True:False&rdquo;}});
			<BR> will change the editoptions values.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>sortGrid</P>
		</TD>
		<TD  >
			<P>colname, <BR> reload</P>
		</TD>
		<TD  >
			<P>jqGrid object</P>
		</TD>
		<TD  >
			<P>Sorts the given colname and shows the appropriate sort icon.
			The same (without sorting icon) can be done using
			setGridParam({sortname:'myname'}).trigger('reloadGrid'). If the
			reload is set to true, the grid reloads with the current page and
			sortorder settings.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD  >
			<P>updateGridRows</P>
		</TD>
		<TD  >
			<P>data,<BR> rowidname,<BR> jsonreader</P>
		</TD>
		<TD  >
			<P>true on success, <BR> false otherwise</P>
		</TD>
		<TD  >
			<P>This method update the existing data in the grid by given
			<EM>rowidname</EM>. <BR> <EM>data</EM> is a array of data in
			format <BR> [{name:value,name1:value1&hellip;},
			{name:value,name2:value2&hellip;}] <BR> where the name is the name
			from colModel and value is the actuall value. It is not neccessary
			that all columns are present in the data item object (the same as
			setRowData method)<BR> <EM>rowidname</EM> (string) - is the name
			of the row which should acts as id If not set the name &ldquo;id&rdquo;
			is used. <BR> <EM>jsonreader</EM> (boolean) default false. If set
			to true a jsonReader definition is used to set the data. Note that
			this work only if the item in jsonReader object 'repeatitems' is
			set to true.In this case the data should be not in pair
			name:value, but only values where the number of columns should be
			equal of those in colModel.</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD  >
			<P>groupingGroupBy</P>
		</TD>
		<TD  >
			<P>groupname,<BR> groupoptions</P>
		</TD>
		<TD  >
			<P>jqGrid object</P>
		</TD>
		<TD  >
			<P>This method set a new grouping field. groupname is the name on which we want to group by, groupoptions is object which replaces  the groupingView object.</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD>
			<P>groupingRemove</P>
		</TD>
		<TD>
			<P>current</P>
		</TD>
		<TD>
			<P>jqGrid object</P>
		</TD>
		<TD>
			<P>Remove the current grouping and clear the grid related grouping rows. If current is set to true only the group rows are removed. If set to false the group rows are removed and the grid is reloaded with the current settings</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD>
			<P>bindKeys</P>
		</TD>
		<TD>
			<P>Object</P>
		</TD>
		<TD  >
			<P>jqGrid object</P>
		</TD>
		<TD>
			<P>This function add a keyboard navigation in the grid and in the tree grid. Parameter passsed to this method is a object which contain the follwing properties : { onEnter: null, onSpace: null, onLeftKey:null, onRightKey: null, scrolingRows : true } .  The onEnterl, onSpace, onLeftKey, onRightKey are events which define what should happen when the appropriate key is pressed. scrolingRows  defines if the grid should  do automatick scrolling is a vertical scrollbar is available.</P>
		</TD>
	</TR>

</TABLE>

</div>


</div><hr />
<div class="footer">
	Last Updated: 03/21/11 | 
	&copy TriRand Ltd, 2012
</div>
<br class="clear" />
<br />
</body>
</html>