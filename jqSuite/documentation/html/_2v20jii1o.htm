<!DOCTYPE html>
<html>
<head> 
	<topictype value="TOPIC" />
	<title>Modifying/Creating a new language pack</title>
	<link rel="stylesheet" type="text/css" href="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/wwhelp.css">
		  <script src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/jquery.min.js" type="text/javascript"></script>
	<script src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/wwhelp.js" type="text/javascript"></script>
	<script>
		// fix up code examples to display tabs	
			  $(function() { $("#example").codeExampleTabs(); });
	</script>
</head>
<body>
<div class="banner">
  <div>
	<span class="projectname">jqSuite php documentation</span>
 </div>
 <div class="topicname">
	<img src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/bmp/TOPIC.gif">&nbsp;Modifying/Creating a new language pack
 </div>
</div>

<div class="contentpane">

<div class="contentbody" id="body"><h3>Structure of a language pack</h3><p>A language pack is essentially a javascript code file with constants for specific strings in the grid that can be localized. In addition to that, there are formats (e.g. currency format, date format, etc) that can be predefined to match the locale of the specific country.<p>In order to modify a language pack, just open the respective javascript file and edit it with your favourite text editor. For example, let's say we want to modify the English language pack. Opening the<b> /js/i18n/grid.locale-en.js</b> file in a text editor brings are something along the lines of (this is just a part of the file):<p><pre><div class="csharpcode">$.jgrid = {
   defaults : {
      recordtext: <span class="codestring">"View {0} - {1} of {2}"</span>,
      emptyrecords: <span class="codestring">"No records to view"</span>,
      loadtext: <span class="codestring">"Loading..."</span>,
      pgtext : <span class="codestring">"Page {0} of {1}"</span>
   },
   search : {
      caption: <span class="codestring">"Search..."</span>,
      Find: <span class="codestring">"Find"</span>,
      Reset: <span class="codestring">"Reset"</span>,
      odata : [<span class="codestring">'equal'</span>, <span class="codestring">'not equal'</span>, <span class="codestring">'less'</span>, <span class="codestring">'less or equal'</span>,<span class="codestring">'greater'</span>,<span class="codestring">'greater or equal'</span>, <span class="codestring">'begins with'</span>,
            <span class="codestring">'does not begin with'</span>,<span class="codestring">'is in'</span>,<span class="codestring">'is not in'</span>,<span class="codestring">'ends with'</span>,
            <span class="codestring">'does not end with'</span>,<span class="codestring">'contains'</span>,<span class="codestring">'does not contain'</span>],
      groupOps: [   { op: <span class="codestring">"AND"</span>, text: <span class="codestring">"all"</span> },   { op: <span class="codestring">"OR"</span>,  text: <span class="codestring">"any"</span> }   ],
      matchText: <span class="codestring">" match"</span>,
      rulesText: <span class="codestring">" rules"</span>
   },
   ...</div></pre><p>Just modify any of the strings/rules you wish. The naming of the string is self-explanatory - for example in order to modify the pager text displaying the number of pages, just modify the pgtext variable in the defaults array. Some of the variables have parameters, e.g. {0}, {1}, etc - these are placeholders for dynamic parameters for the respective string - e.g. pgtext requires two parameters - the current page and the total number of pages. They will be provided automatically by jqGrid.<p>You can also modify various locale specific formats in the same file. They are defined in the formatter portion of the localization file, for example (this is just a part of the formatter)<p><pre><div class="csharpcode">formatter : {
      integer : {thousandsSeparator: <span class="codestring">" "</span>, defaultValue: <span class="codestring">'0'</span>},
      <span class="datatypes">number</span> : {decimalSeparator:<span class="codestring">"."</span>, thousandsSeparator: <span class="codestring">" "</span>, decimalPlaces: 2, defaultValue: <span class="codestring">'0.00'</span>},
      currency : {decimalSeparator:<span class="codestring">"."</span>, thousandsSeparator: <span class="codestring">" "</span>, decimalPlaces: 2, prefix: <span class="codestring">""</span>, suffix:<span class="codestring">""</span>, defaultValue: <span class="codestring">'0.00'</span>},
      <span class="datatypes">date</span> : {
         dayNames:   [
            <span class="codestring">"Sun"</span>, <span class="codestring">"Mon"</span>, <span class="codestring">"Tue"</span>, <span class="codestring">"Wed"</span>, <span class="codestring">"Thr"</span>, <span class="codestring">"Fri"</span>, <span class="codestring">"Sat"</span>,
            <span class="codestring">"Sunday"</span>, <span class="codestring">"Monday"</span>, <span class="codestring">"Tuesday"</span>, <span class="codestring">"Wednesday"</span>, <span class="codestring">"Thursday"</span>, <span class="codestring">"Friday"</span>, <span class="codestring">"Saturday"</span>
         ],
         monthNames: [
            <span class="codestring">"Jan"</span>, <span class="codestring">"Feb"</span>, <span class="codestring">"Mar"</span>, <span class="codestring">"Apr"</span>, <span class="codestring">"May"</span>, <span class="codestring">"Jun"</span>, <span class="codestring">"Jul"</span>, <span class="codestring">"Aug"</span>, <span class="codestring">"Sep"</span>, <span class="codestring">"Oct"</span>, <span class="codestring">"Nov"</span>, <span class="codestring">"Dec"</span>,
            <span class="codestring">"January"</span>, <span class="codestring">"February"</span>, <span class="codestring">"March"</span>, <span class="codestring">"April"</span>, <span class="codestring">"May"</span>, <span class="codestring">"June"</span>, <span class="codestring">"July"</span>, <span class="codestring">"August"</span>, <span class="codestring">"September"</span>, <span class="codestring">"October"</span>, <span class="codestring">"November"</span>, <span class="codestring">"December"</span>
         ],
         ...</div></pre><p>Just modify anything you wish, like thousandsSeparator for integer format, or the month or dayNames. Finally, save the file with another name, for example, "grid.locale-custom.js" and include it in your page instead of the English file, e.g.<p><pre><div class="htmlcode">...
<span class="elements">&lt;head&gt;</span>  
<span class="codecomment">&lt;!-- The jQuery UI theme that will be used by the grid -->  
<span class="elements">&lt;link</span> <span class="attributes">rel=</span>"stylesheet" type="text/css" media="screen" href="/themes/redmond/jquery-ui-1.7.1.custom.css" /&gt;  

&lt;!-- The jQuery UI theme extension jqGrid needs -->  
<span class="elements">&lt;link</span> <span class="attributes">rel=</span>"stylesheet" type="text/css" media="screen" href="/themes/ui.jqgrid.css" /&gt;  

&lt;!-- jQuery runtime minified -->  
<span class="elements">&lt;script</span> <span class="attributes">src=</span>"/js/jquery-1.3.2.min.js" type="text/javascript"&gt;&lt;/script&gt;  
<b>&lt;!-- The localization file we need, Custom in this case --></b>  
<span class="elements">&lt;script</span> <span class="attributes">src=</span>"/js/i18n/grid.locale-custom.js" type="text/javascript"&gt;&lt;/script&gt;  
&lt;!-- The jqGrid client-side javascript -->  
<span class="elements">&lt;script</span> <span class="attributes">src=</span>"/js/jquery.jqGrid.min.js" type="text/javascript"&gt;&lt;/script&gt; 
...
<span class="elements">&lt;/head&gt;</span>
...</span></div></pre><p>
</div>


</div><hr />
<div class="footer">
	Last Updated: 03/20/11 | 
	&copy TriRand Ltd, 2012
</div>
<br class="clear" />
<br />
</body>
</html>