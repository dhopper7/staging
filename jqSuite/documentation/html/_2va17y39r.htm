<!DOCTYPE html>
<html>
<head> 
	<topictype value="TOPIC" />
	<title>Cell Editing options and events</title>
	<link rel="stylesheet" type="text/css" href="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/wwhelp.css">
		  <script src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/jquery.min.js" type="text/javascript"></script>
	<script src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/wwhelp.js" type="text/javascript"></script>
	<script>
		// fix up code examples to display tabs	
			  $(function() { $("#example").codeExampleTabs(); });
	</script>
</head>
<body>
<div class="banner">
  <div>
	<span class="projectname">jqSuite php documentation</span>
 </div>
 <div class="topicname">
	<img src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/bmp/TOPIC.gif">&nbsp;Cell Editing options and events
 </div>
</div>

<div class="contentpane">

<div class="contentbody" id="body">cellEditing supports key navigation and editing individual cells, with the following behaviour:<p><ul>

<li> When we click on a cell that is not editable, the cell is selected and we can use the up, down, left and right keys to navigate through the cells.<br>
<li> If we move to a cell that is editable, we can press [Enter] to edit the cell. The cell is saved when we press [Enter] again, when we press [Tab], or when we click on another cell. If we press [ESC], the cell is not saved. When editing a cell, the cursor keys move only within the cell.<br>
<li> When we click on cell that is editable, then we go directly into edit mode.<br>
<li> The cell is not editable if it has a class 'not-editable-cell', instead that in colModel is set to be editable<br>
</ul><p>The properties, events and methods used in cell editing are a sub-set of those of the parent grid, and described below.<br>
The above mean that when cell editing is used the following method should be used<p>setGridOptions - to set a option for cell editing <br>
setGridEvent - to set a event related to cell editing.<p><b>Properties</b><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Property</P>
		</TH>
		<TH>
			<P>Type</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
		<TH>
			<P>Default</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>cellEdit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Enables (disables) cell editing. When this option is
			set to true, onSelectRow event can not be used, and hovering is
			disabled (when mouseover on the rows).</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>cellsubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines where the contents of the cell are saved
			- can have two values: 'remote' or 'clientArray'. <BR> If <EM>remote</EM>
			the content is immediately saved to the server using the cellurl
			property, via ajax. The rowid and the cell content are added to
			the url as name:value pairs. For example, if we save the cell
			named mycell,{id: rowid, mycell: cellvalue} is added to the url. <BR>
			If 'clientArray', no ajax request is made and the content of the
			changed cell can be obtained via the method getChangedCells 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>remote</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>cellurl</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the url where the cell is to be saved</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>ajaxCellOptions</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option allow to set global ajax settings for
			the cell editiing when we save the data to the server. Note that
			with this option is possible to overwrite all current ajax setting
			in the save request including the complete event.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
</TABLE>
<p><b>Events</b><p>Many of the following events use the parameters defined here:<br>
<ul>

<li> rowid - is the id of the row<br>
<li> cellname is the name of the cell (name from colModel)<br>
<li> value - the value of the cell<br>
<li> iRow - the index of the row (do not mix with rowid)<br>
<li> iCol - the index of the column<br>
</ul><p>
<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Event</P>
		</TH>
		<TH>
			<P>Parameters</P>
		</TH>
		<TH>
			<P>Description</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterEditCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowid, cellname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to a cell that is editable; this event
			fires after the edited cell is edited - i.e. after the element is
			inserted into the DOM</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterSaveCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowid, cellname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to a cell that is editable; this event
			fires after the cell has been successfully saved. This is the
			ideal place to change other content.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>afterSubmitCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>serverresponse, rowid, cellname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to a cell that is editable; this event
			Fires after the cell and other data is posted to the server Should
			return array of type [success(boolean),message] when return
			[true,&rdquo;&rdquo;] all is ok and the cellcontent is saved
			[false,&rdquo;Error message&rdquo;] then a dialog appears with the
			&ldquo;Error message&rdquo; and the cell content is not saved.
			servereresponse is the response from the server. To use this we
			should use serverresponse.responseText to obtain the text message
			from the server.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeEditCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowid, cellname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to a cell that is editable; this event
			fires before editing the cell.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeSaveCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowid, cellname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to a cell that is editable; this event
			fires before validation of values if any. This event can return
			the new value which value can replace the edited one <BR>
			beforeSaveCell : function(rowid,celname,value,iRow,iCol) { <BR>
			if( some_condition )<BR> { return &ldquo;new value&rdquo;; } <BR>
			} <BR> The value will be replaced with &ldquo;new value&rdquo; 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>beforeSubmitCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowid, cellname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to a cell that is editable; this event
			fires before submit the cell content to the server (valid only if
			cellsubmit : 'remote'). Can return new array that will be posted
			to the server. <BR> beforeSubmitCell :
			function(rowid,celname,value,iRow,iCol) { <BR> if( some_condition
			) { <BR> return {name1:value1,name2:value2} <BR> } <BR> else <BR>
			{ return {} } <BR> } <BR> The returned array will be added to the
			cellurl posted data.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>errorCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>serverresponse, status</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>fires if there is a server error; servereresponse is
			the response from the server. To use this we should apply
			serverresponse.responseText to obtain the text message from the
			server. status is the status of the error. If not set a modal
			dialog apper.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>formatCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowid, cellname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to a cell that is editable; this event
			allows formatting the cell content before editing, and returns the
			formatted value</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>onSelectCell</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowid, celname, value, iRow, iCol</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>applies only to cells that are not editable; fires
			after the cell is selected</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>serializeCellData</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>postdata</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set this event can serialize the data passed to
			the ajax request when we save a cell. The function should return
			the serialized data. This event can be used when a custom data
			should be passed to the server - e.g - JSON string, XML string and
			etc. To this event is passed the data which will be posted to the
			server</P>
		</TD>
	</TR>
</TABLE>
<p><br>
Below is the order of which the events are called when the cellsubmit option is 'remote'<p>if a cell is editable then<br>
1. formatCell - format and the value of the cell can be changed before editing<br>
2. beforeEditCell<br>
3. afterEditCell - after the input element is created<br>
4. beforeSaveCell<br>
5. beforeSubmitCell<br>
if the submit is successfully<br>
6. afterSubmitCell<br>
7. afterSaveCell<br>
else<br>
6. errorCell<br>
else if the cell is not editable<br>
1. onSelectCell<p>If the cellsubmit is 'clientArray' then<br>
if a cell is editable then<br>
1. formatCell - format and the value of the cell can be changed before editing<br>
2. beforeEditCell<br>
3. afterEditCell - after the input element is created<br>
4. beforeSaveCell<br>
5. beforeSubmitCell<br>
6. afterSaveCell<br>
else if the cell is not editable<br>
1. onSelectCell <p><b>How is the data organized</b><p>When the cell is edited and the input elements is created we set the following rules:<p><ul>

<li> The id of the editable cell element is constructed as 'iRow_'+ the name from the colModel array - where the iRow is the index of the row (not rowid) Example if we edit cell with index=20 and editable element has name 'myname' (from colModel) then the id becomes 20_myname.<br>
<li> The name of the editable element is constructed from the name of the colModel array - property - name<br>
</ul><p><b>What is posted to the server?</b><p>When the data is posted to the server we construct object {} that contain:<p><ul>

<li> the name:value pair where the name is the name of the input element represented in the cell<br>
<li> additionally we add a pair id:rowid where the rowid is the id of the row<br>
<li> if the returned data from beforeSubmitCell event is not empty we extend this data with the posted data.<br>
</ul><br>

</div>


</div><hr />
<div class="footer">
	Last Updated: 11/03/10 | 
	&copy TriRand Ltd, 2012
</div>
<br class="clear" />
<br />
</body>
</html>