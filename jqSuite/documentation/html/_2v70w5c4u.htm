<!DOCTYPE html>
<html>
<head> 
	<topictype value="TOPIC" />
	<title>Grid Options</title>
	<link rel="stylesheet" type="text/css" href="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/wwhelp.css">
		  <script src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/jquery.min.js" type="text/javascript"></script>
	<script src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/templates/wwhelp.js" type="text/javascript"></script>
	<script>
		// fix up code examples to display tabs	
			  $(function() { $("#example").codeExampleTabs(); });
	</script>
</head>
<body>
<div class="banner">
  <div>
	<span class="projectname">jqSuite php documentation</span>
 </div>
 <div class="topicname">
	<img src="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/bmp/TOPIC.gif">&nbsp;Grid Options
 </div>
</div>

<div class="contentpane">

<div class="contentbody" id="body">For the Grid options a two methods can be used<p><b>getGridOption($key)</b> to obtain the desired option <br>
where $key is a name listed in the table below<br>
and <br>
<b>setGridOption(array $aoptions)</b> to set a new option(s)<br>
where<br>
$aoptions is array where multiple optins can be set. <br>
The method can be called several times in order to set or overwrite existing option(s).<p>Example: If we want to change the width and the height of the grid we can write the code like this<br>
<pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGridRender instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;setGridOptions(<span class="datatypes">array</span>(<span class="codestring">"width"</span>=&gt;500,<span class="codestring">"height"</span>=&gt;350));
...
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p>The same code is equivalent<p><pre><div class="csharpcode">&lt;?php
...
<span class="codecomment">// Create the jqGridRender instance</span>
$grid = <span class="programcontrol">new</span> jqGridRender($conn);
...
$grid-&gt;setGridOptions(<span class="datatypes">array</span>(<span class="codestring">"width"</span>=&gt;500));
$grid-&gt;setGridOptions(<span class="datatypes">array</span>(<span class="codestring">"height"</span>=&gt;350));
...
$grid-&gt;renderGrid(...);
?&gt;</div></pre><p><br>
Bellow is a list of all available grid options<p><br>

<table class="detailtable" width="96%">
	<TR VALIGN=TOP>
		<TH>
			<P>Type</P>
		</TH>
		<TH>
			<P>Name</P>
		</TH>
		<TH>
			<P>Description </P>
		</TH>
		<TH>
			<P>Default</P>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>ajaxGridOptions</P>
		</TD>
		<TD >
			<P ALIGN=LEFT>This option allow to set global ajax settings for
			the grid when we request data. Note that with this option is
			possible to overwrite all current ajax setting in the grid
			including the error, complete and beforeSend events.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD >
			<P ALIGN=LEFT>ajaxSelectOptions</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option allow to set global ajax settings for
			the select element when the select is obtained via dataUrl option
			in editoptions or searchoptions objects</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>altclass</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The class that is used for alternate rows. You can
			construct your own class and replace this value. This option is
			valid only if altRows options is set to true</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>ui-priority-secondary</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>altRows</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Set a zebra-striped grid</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>autoencode</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set to true encodes (html encode) the incoming
			(from server) and posted data (from editing modules). By example &lt;
			will be converted and posted to &amp;lt;</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>autowidth</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set to true, the grid width is recalculated
			automatically to the width of the parent element. This is done
			only initially when the grid is created. In order to resize the
			grid when the parent element changes width you should apply custom
			code and use a setGridWidth method for this purpose</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>caption</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines the Caption layer for the grid. This caption
			appears above the Header layer. If the string is empty the caption
			does not appear.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>cellLayout</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option determines the padding + border width of
			the cell. Usually this should not be changed, but if custom
			changes to td element are made in the grid css file this will need
			to be changed. The initial value of 5 means
			paddingLef&rArr;2+paddingRight&rArr;2+borderLeft&rArr;1=5</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>5</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>cellEdit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Enables (disables) cell editing. See Cell Editing
			for more details</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>cellsubmit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines where the contents of the cell are saved:
			'remote' or 'clientArray'. See Cell Editing for more details</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>'remote'</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>cellurl</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>the url where the cell is to be saved. See Cell
			Editing for more details</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>cmTemplate</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>A object which can overwrite the default values of all newly created columns. By example if you want that all columns in the grid should not be sortable set array("sortable"=>false) for this property  and all columns will be not sortable when the grid is created.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>


	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>colModel</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Array which describes the parameters of the
			columns.This is the most important part of the grid. For a full
			description of all valid values see colModel API. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>colNames</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>An array in which we place the names of the columns.
			This is the text that appears in the head of the grid (Header
			layer). The names are separated with commas. Note that the number
			of element in this array should be equal of the number elements in
			the colModel array.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>datastr</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The string of data when datatype parameter is set to
			<A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:retrieving_data#xml_string">xmlstring</A>
			or <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:retrieving_data#json_string">jsonstring</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>datatype</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines what type of information to expect to
			represent data in the grid. Valid options are xml - we expect xml
			data; xmlstring - we expect xml data as string; json - we expect
			JSON data; jsonstring - we expect JSON data as string; local - we
			expect data defined at client side (array data); javascript - we
			expect javascript as data; function - custom defined function for
			retrieving data. See <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:colmodel_options">colModel
			API</A> and <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:retrieving_data">Retrieving
			Data</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT>xml</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>deselectAfterSort</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Applicable only when we use datatype : local.
			Deselects currently-selected row(s) when a sort is applied.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>direction</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the language direction in grid. The
			default is &ldquo;ltr&rdquo; (Left To Right language). When set to
			&ldquo;rtl&rdquo; (Right To Left) the grid automatically do the
			needed. It is important to note that in one page we can have two
			(or more) grids where the one can have direction &ldquo;ltr&rdquo;
			while the other can have direction &ldquo;rtl&rdquo;. This option
			work only in FireFox 3.x versions and Internet Explorer versions
			&gt;=6. Currently Safai and Google Chrome does not support fully
			direction &ldquo;rtl&rdquo;. Also the same apply to Opera
			browsers. The most common problem in FireFox is that the default
			settings of the browser does not support RTL. In order change this
			see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:howto_grid_base">HOW
			TO</A> section in this chapter .</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>ltr</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>editurl</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines the url for inline and form editing.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>emptyrecords</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Display the information when the returned (or the
			current) number of records is zero. This option is valid only if
			viewrecords option is set to true.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>see lang file</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>ExpandColClick</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>when true, the treeGrid is expanded and/or collapsed
			when we click on the text of the expanded column, not only on the
			image</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>ExpandColumn</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>indicates which column (name from colModel) should
			be used to expand the tree grid. If not set the first one is used.
			Valid only when treeGrid option is set to true.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>footerrow</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set to true this will place a footer table with
			one row below the gird records and above the pager. The number of
			columns equal of these from colModel</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>forceFit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set to true, and resizing the width of a column,
			the adjacent column (to the right) will resize so that the overall
			grid width is maintained (e.g., reducing the width of column 2 by
			30px will increase the size of column 3 by 30px). In this case
			there is no horizontal scrolbar. Note: this option is not
			compatible with shrinkToFit option - i.e if shrinkToFit is set to
			false, forceFit is ignored.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>gridstate</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the current state of the grid (i.e. when
			used with hiddengrid, hidegrid and caption options). Can have
			either of two states: 'visible' or 'hidden'</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>visible</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>gridview</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>In the previous versions of jqGrid including
			3.4.X,reading a relatively big data sets (Rows &gt;=100 ) caused
			speed problems. The reason for this was that as every cell was
			inserted into the grid we applied about 5-6 jQuery calls to it.
			Now this problem is resolved; we now insert the entry row at once
			with a jQuery append. The result is impressive - about 3-5 times
			faster. What will be the result if we insert all the data at once?
			Yes, this can be done with a help of gridview option when set to
			true. The result is a grid that is 5 to 10 times faster. Of course
			when this option is set to true we have some limitations. If set
			to true we can not use treeGrid, subGrid, or afterInsertRow event.
			If you do not use these three options in the grid you can set this
			option to true and enjoy the speed.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>height</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The height of the grid. Can be set as number (in
			this case we mean pixels) or as percentage (only 100% is acceped)
			or value of auto is acceptable.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>150</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>hiddengrid</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set to true the grid initially is hidden. The
			data is not loaded (no request is sent) and only the caption layer
			is shown. When the show/hide button is clicked the first time to
			show grid, the request is sent to the server, the data is loaded,
			and grid is shown. From this point we have a regular grid. This
			option has effect only if the caption property is not empty and
			the hidegrid property (see below) is set to true.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>hidegrid</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Enables or disables the show/hide grid button, which
			appears on the right side of the Caption layer. Takes effect only
			if the caption property is not an empty string.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>hoverrows</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set to false the mouse hovering is disabled in
			the grid data rows.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>idPrefix</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>allow not have duplicate id in data row ids in case of two or more grids in the same page which have data with equal id</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>ignoreCase</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>By default the local searching is case sensitive. To make the local search and sorting not case sensitive set this options to true</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>jsonReader</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Array which describes the structure of the expected
			json data. For a full description and default setting, see
			<A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:retrieving_data#json_data">Retrieving
			Data JSON Data</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>lastpage</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Readonly property. Determines the total number of
			pages returned from the request. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>lastsort</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Readonly property. Determines the index of last
			sorted column beginning from 0</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>loadonce</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If this flag is set to true, the grid loads the data
			from the server only once (using the appropriate datatype). After
			the first request the datatype parameter is automatically changed
			to local and all further manipulations are done on the client
			side. The functions of the pager (if present) are disabled.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>loadtext</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The text which appear when requesting and sorting
			data. This parameter is located in language file</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Loading&hellip;</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>loadui</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option controls what to do when an ajax
			operation is in progress.<BR> <STRONG>disable</STRONG> - disables
			the jqGrid progress indicator. This way you can use your own
			indicator.<BR> <STRONG>enable</STRONG> (default) - enables
			&ldquo;Loading&rdquo; message in the center of the grid. <BR>
			<STRONG>block</STRONG> - enables the &ldquo;Loading&rdquo; message
			and blocks all actions in the grid until the ajax request is
			finished. Note that this disables paging, sorting and all actions
			on toolbar, if any. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>enable</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>mtype</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines the type of request to make (&ldquo;POST&rdquo;
			or &ldquo;GET&rdquo;)</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>GET</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>multikey</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This parameter have sense only multiselect option is
			set to true. Defines the key which will be pressed when we make
			multiselection. The possible values are: <STRONG>shiftKey</STRONG>
			- the user should press Shift Key <STRONG>altKey</STRONG> - the
			user should press Alt Key <STRONG>ctrlKey</STRONG> - the user
			should press Ctrl Key</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>multiboxonly</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option works only when multiselect = true. When
			multiselect is set to true, clicking anywhere on a row selects
			that row; when multiboxonly is also set to true, the
			multiselection is done only when the checkbox is clicked (Yahoo
			style). Clicking in any other row (suppose the checkbox is not
			clicked) deselects all rows and the current row is selected.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>multiselect</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If this flag is set to true a multi selection of
			rows is enabled. A new column at left side is added. Can be used
			with any datatype option.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>multiselectWidth</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>etermines the width of the multiselect column if
			multiselect is set to true.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>20</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>page</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Set the initial number of page when we make the
			request.This parameter is passed to the url for use by the server
			routine retrieving the data</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>1</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>pager</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines that we want to use a pager bar to navigate
			through the records. This must be a valid html element; in our
			example we gave the div the id of &ldquo;pager&rdquo;, but any
			name is acceptable. Note that the Navigation layer (the &ldquo;pager&rdquo;
			div) can be positioned anywhere you want, determined by your html;
			in our example we specified that the pager will appear after the
			Table Body layer. The valid calls can be (using our example)
			'pager', '#pager', jQuery('#pager'). I recommend to use the second
			one. See <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:pager">Pager</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string.</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>pagerpos</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the position of the pager in the grid. By
			default the pager element when created is divided in 3 parts (one
			part for pager, one part for navigator buttons and one part for
			record information)</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>center</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>pgbuttons</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines if the Pager buttons should be shown if
			pager is available. Also valid only if pager is set correctly. The
			buttons are placed in the pager bar. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>pginput</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines if the input box, where the user can
			change the number of requested page, should be available. The
			input box appear in the pager bar. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>pgtext</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Show information about current page status. The
			first value is the current loaded page. The second value is the
			total number of pages</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>See lang file</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>prmNames</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Default values prmNames: <BR>
			{page:&ldquo;page&rdquo;,rows:&ldquo;rows&rdquo;, sort:
			&ldquo;sidx&rdquo;,order: &ldquo;sord&rdquo;, search:&ldquo;_search&rdquo;,
			nd:&ldquo;nd&rdquo;,
			id:&ldquo;id&rdquo;,oper:&ldquo;oper&rdquo;,editoper:&ldquo;edit&rdquo;,addoper:&ldquo;add&rdquo;,deloper:&ldquo;del&rdquo;}
			<BR> Customizes names of the fields sent to the server on a Post:
			default values for these fields are &ldquo;page&rdquo;, &ldquo;rows&rdquo;,
			&ldquo;sidx&rdquo;, &ldquo;sord&rdquo;, &ldquo;search&rdquo; and
			&ldquo;nd&rdquo;. For example, with this setting, you can change
			the sort order element from &ldquo;sidx&rdquo; to &ldquo;mysort&rdquo;:
			prmNames: {sort: &ldquo;mysort&rdquo;}. The string that will be
			posted to the server will then be
			myurl.php?page=1&amp;rows=10&amp;mysort=myindex&amp;sord=asc
			rather than myurl.php?page=1&amp;rows=10&amp;sidx=myindex&amp;sord=asc
			<BR> When some parameter is set to null they will be not sended to
			the server. By example if we set prmNames: { nd:null} the nd
			parameter will not be sended. For npage option see scroll option.
			<BR> The options meaning the following <BR> page - the the
			requested page, <BR> rows - the number of rows requested, <BR>
			sort - the sorting column, <BR> order - the sort order, <BR>
			search - the search indicator, <BR> nd - the time passed to the
			request (for IE browsers not to cache the request), <BR> id - the
			name of the id when post data in editing modules, <BR> oper - the
			operation parameter, <BR> editoper - the name of operation when
			the data is posted in edit mode, <BR> addoper - the name of
			operation when the data is posted in add mode,<BR> deloper - the
			name of operation when the data is posted in delete mode,</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>none 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>postData</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This array is passed directly to the url. This is
			associative array and can be used this way: {name1:value1&hellip;}.
			See API methods for manipulation.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>reccount</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Readonly property. Determines the exactly number of
			rows in the grid. Do not mix this with records parameter. Instead
			that in most cases they are equal there is a case where this is
			not true. By example you define rowNum parameter 15, but you
			return from server records parameter = 20, then the records
			parameter will be 20, the reccount parameter will be 15, and in
			the grid you will have 15 records.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>recordpos</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the position of the record information in
			the pager. Can be left, center, right</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>right</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>records</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Readonly property. Determines the number of returned
			records in grid from the request</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>none</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>recordtext</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Represent information that can be shown in the
			pager. Also this option is valid if viewrecords option is set to
			true. This text appear only if the tottal number of recreds is
			greater then zero.In order to show or hide some information the
			items in {} mean the following: {0} the start position of the
			records depending on page number and number of requested records;
			{1} - the end position {2} - total records returned from the data</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>see lang file</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>resizeclass</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Assigns a class to columns that are resizable so
			that we can show a resize handle only for ones that are resizable</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowList</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>An array to construct a select box element in the
			pager in which we can change the number of the visible rows. When
			changed during the execution, this parameter replaces the rowNum
			parameter that is passed to the url. If the array is empty the
			element does not appear in the pager. Typical you can set this
			like [10,20,30]. If the rowNum parameter is set to 30 then the
			selected value in the select box is 30.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rownumbers</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If this option is set to true, a new column at left
			of the grid is added. The purpose of this column is to count the
			number of available rows, beginning from 1. In this case colModel
			is extended automatically with new element with name - 'rn'. Also,
			be careful not to use the name 'rn' in colModel</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowNum</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Sets how many records we want to view in the grid.
			This parameter is passed to the url for use by the server routine
			retrieving the data. Note that if you set this parameter to 10
			(i.e. retrieve 10 records) and your server return 15 then only 10
			records will be loaded. Set this parameter to <STRONG>-1</STRONG>
			(unlimited) to disable this checking. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>20</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rownumWidth</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the width of the row number column if
			rownumbers option is set to true.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>25</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>savedRow</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This is read only property and is used in Inline and
			cell editing modules to store the data, before editing the row or
			cell. See <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:cell_editing">Cell
			editing</A> and <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:inline_editing">Inline
			editing</A>.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean or integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>scroll</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Creates dynamic scrolling grids. When enabled, the
			pager elements are disabled and we can use the vertical scrollbar
			to load data. When set to true the grid will always hold all the
			items from the start through to the latest point ever visited. <BR>
			When scroll is set to value (eg 1), the grid will just hold the
			visible lines. This allow us to load the data at portions whitout
			to care about the memory leaks. Additionally this we have optional
			extension to the server protocol: npage (see prmNames array). If
			you set the npage option in prmNames, then the grid will sometimes
			request more than one page at a time, if not it will just perform
			multiple gets.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>scrollOffset</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the width of the vertical scrollbar.
			Since different browsers interpret this width differently (and it
			is difficult to calculate it in all browsers) this can be changed.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>18</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>scrollrows</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When enabled, selecting a row with setSelection
			scrolls the grid so that the selected row is visible. This is
			especially useful when we have a verticall scrolling grid and we
			use form editing with navigation buttons (next or previous row).
			On navigating to a hidden row, the grid scrolls so the selected
			row becomes visible.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>selarrrow</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This options is read only. Determines the currently
			selected rows when multiselect is set to true. This is one
			dimensional array and the values in the array correspond to the
			selected id's in the grid.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>selrow</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option is read only. Contain the id of the last
			selected row. If you sort or apply a pagging this options is set
			to null</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>shrinkToFit</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option describes the type of calculation of the
			initial width of each column against with the width of the grid.
			If the value is true and the value in width option is set then:
			Every column width is scaled according to the defined option
			width. Example: if we define two columns with a width of 80 and
			120 pixels, but want the grid to have a 300 pixels - then the
			columns are recalculated as follow: 1- column = 300(new
			width)/200(sum of all width)*80(column width) = 120 and 2 column =
			300/200*120 = 180. The grid width is 300px. If the value is false
			and the value in width option is set then: The width of the grid
			is the width set in option. The column width are not recalculated
			and have the values defined in colModel.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>true</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>sortable</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When enabled this option allow column reordering
			with mouse. Since this option uses jQuery UI sortable widget, be a
			sure that this widget and the related to widget files are loaded
			in head tag. Also be a sure too that you mark the grid.jqueryui.js
			when you download the jqGrid.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>sortname</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The initial sorting name when we use datatypes xml
			or json (data returned from server). This parameter is added to
			the url. If set and the index (name) match the name from colModel
			then to this column by default is added a image sorting icon,
			according to the parameter sortorder (below). See prmNames. 
			</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>sortorder</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The initial sorting order when we use datatypes xml
			or json (data returned from server).This parameter is added to the
			url - see prnNames. Two possible values - asc or desc.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>asc</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>subGrid</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If set to true this enables using a subgrid. If the
			subGrid is enabled a additional column at left side is added to
			the basic grid. This column contains a 'plus' image which indicate
			that the user can click on it to expand the row. By default all
			rows are collapsed. See <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:subgrid">Subgrid</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>subGridModel</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This property, which describes the model of the
			subgrid, has an effect only if the subGrid property is set to
			true. It is an array in which we describe the column model for the
			subgrid data. For more info see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:subgrid">Subgrid</A>.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>subGridType</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option allow loading subgrid as a service. If
			not set, the datatype parameter of the parent grid is used.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>subGridUrl</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option has effect only if subGrid option is set
			to true. This option points to the file from which we get the data
			for the subgrid. jqGrid adds the id of the row to this url as
			parameter. If there is a need to pass additional parameters, use
			the params option in subGridModel. See <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:subgrid">Subgrid</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty string</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>subGridWidth</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the width of the subGrid column if
			subgrid is enabled.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>20</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>toolbar</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This option defines the toolbar of the grid. This is
			array with two values in which the first value enables the toolbar
			and the second defines the position relative to body Layer.
			Possible values &ldquo;top&rdquo;,&rdquo;bottom&rdquo;, &ldquo;both&rdquo;.
			When we set toolbar: [true,&rdquo;both&rdquo;] two toolbars are
			created &ndash; one on the top of table data and one of the bottom
			of the table data. When we have two toolbars then we create two
			elements (div). The id of the top bar is constructed like &ldquo;t_&rdquo;+id
			of the grid and the bottom toolbar the id is &ldquo;tb_&rdquo;+id
			of the grid. In case when only one toolbar is created we have the
			id as &ldquo;t_&rdquo; + id of the grid, independent of where this
			toolbar is created (top or bottom)</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>[false,''] 
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>toppager</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When enabled this option place a pager element at
			top of the grid below the caption (if available). If another pager
			is defined both can coexists and are refreshed in sync. The id of
			the new created pager is a combination of the gridid+&ldquo;_toppager&rdquo;.
						</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>integer</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>totaltime</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Readonly parameter. Measure the loading time of the
			records - currently available only when we load xml or json data.
			Also the check begin when the request is complete and we begin to
			insert data into the grid and ends when the last row is added.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>mixed</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>treedatatype</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the initial datatype (see datatype
			option). Usually this should not be changed. During the reading
			process this option is equal to the datatype option.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>treeGrid</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Enables (disables) the tree grid format. For more
			details see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:treegrid">Tree
			Grid</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>treeGridModel</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Deteremines the method used for the treeGrid. Can be
			nested or adjacency. See <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:treegrid">Tree
			Grid</A></P>
		</TD>
		<TD>
			<P ALIGN=LEFT>nested</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>treeIcons</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This array set the icons used in the tree. The icons
			should be a valid names from UI theme roller images. The default
			values are:
			{plus:'ui-icon-triangle-1-e',minus:'ui-icon-triangle-1-s',leaf:'ui-icon-radio-off'}
						</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>treeReader</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>extends the colModel defined in the basic grid. The
			fields described here are added to end of the colModel array and
			are hidden. This means that the data returned from the server
			should have values for these fields. For a full description of all
			valid values see <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:treegrid">Tree
			Grid</A>.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>numeric</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>tree_root_level</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Determines the level where the root element begins
			when treeGrid is enabled</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>0</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>string</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>url</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The url of the file that holds the request</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>userData</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This array contain custom information from the
			request. Can be used at any time.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>empty array</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>userDataOnFooter</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>When set to true we directly place the user data
			array userData at footer. The rules are as follow: If the userData
			array contain name which is equal to those of colModel then the
			value is placed in that column.If there are no such values nothing
			is palced. Note that if this option is used we use the current
			formatter options (if available) for that column</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>viewrecords</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Defines whether we want to display the number of
			total records from the query in the pager bar.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>viewsortcols</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>The purpose of this parameter is to define different
			look and behavior of sorting icons that appear near the header.
			This parameter is array with the following default options
			viewsortcols : [false,'vertical',true]. The first parameter
			determines if all icons should be viewed at the same time when all
			columns have sort property set to true. The default of false
			determines that only the icons of the current sorting column
			should be viewed. Setting this parameter to true causes all icons
			in all sortable columns to be viewed.<BR> The second parameter
			determines how icons should be placed - vertical means that the
			sorting icons are one under another. 'horizontal' means that the
			icons should be one near other. <BR> The third parameter
			determines the click functionality. If set to true the columns are
			sorted if the header is clicked. If set to false the columns are
			sorted only when the icons are clicked. <BR> Important note: When
			set a third parameter to false be a sure that the first parameter
			is set to true, otherwise you will lost the sorting.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>number</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>width</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>If this option is not set, the width of the grid is
			a sum of the widths of the columns defined in the colModel (in
			pixels). If this option is set, the initial width of each column
			is set according to the value of shrinkToFit option.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>none</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>xmlReader</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>Array which describes the structure of the expected
			xml data. For a full description refer to <A HREF="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:retrieving_data#xml_data">Retrieving
			Data XML Data</A>.</P>
		</TD>
		<TD>
			<P ALIGN=LEFT><BR>
			</P>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>number</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>rowTotal</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This parameter have effect only when is used with the loadonce parameter set to true. This allow to load all the needed data at once and operate it localy. Note that paging, searching and sorting will work. <BR>When the parameter is set to -1 we load all the data from the request. <BR>When parameter is a number greater than zero we load the requested number of rows. 
<BR>Note that rowNum determines the total records displayed in the grid, while rowTotal the total rows on wich we operate.
</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null
			</P>
		</TD>
	</TR>


	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>boolean</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>grouping</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This parameter enable the grouping in the grid. When set to true you must configure the groupingView options array in order to group by certain fields (see below). When the grouping is enabled the following grid options are set internally to the following values: <BR>

<ul>
<li> scroll = > false
<li> rownumbers => false;
<li> subGrid => false;
<li> treeGrid => false;
<li> gridview => true;
</ul>
</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>false</P>
		</TD>
	</TR>

	<TR VALIGN=TOP>
		<TD>
			<P ALIGN=LEFT>array</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>groupingView</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>This parameter configures the grouping. It has effect only if the grouping option is set to true (see above). <BR>
The parameter contain the following options: <BR>
<ul>
<li> groupField - array - set the name or names on wich grouping occur. The name(s) correspond to the name in colModel.
<li> groupOrder - array - set the order on which the grouping occur. Can be asc or desc
<li> groupText - array - set the text that will appear at the header when the grouping occur. Actually this a template. We have the following template options - '{0}' will display the current value of the grouped field;  '{1}' will display total number of the group; {name_from_col_model} when set is a field which is set to have a summary - this is a way to display a summary information on the grouping header.  By example if the current value of the grouping field is Client and we setting '{0} - total {1} item(s)' will display 'Client - total 5 item(s)'.
<li> groupColumnShow - array which values are booleans. Determines if the grouped column should be displayed. Default value is true. setting the value to false will hide the grouped coulumn.
<li> groupSummary - array which values are booleans. When set to true a footer column will be displayed at end of each group allowing to put summary information for the group. When this option is set to true the following options in colModel can be set in order to have the summary information - summaryType and optionally summaryTpl. For more info refer to <a href="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/_2v70w5p2k.htm" >colModel options</a> and <a href="../../../jqSuitePHP_Sources_4_4_4_0/documentation/html/_2zy0mj9h1.htm" >Grouping with summary</a>.
<li> plusicon - string. determines the plus icon from jQuery UI theme roller set icons. Default 'ui-icon-circlesmall-plus'
<li> minusicon - string. determines the minus icon from jQuery UI theme roller set icons. Default 'ui-icon-circlesmall-minus'
</ul>

One possible setting can look like this <BR><BR>
$grid->setGridOptions(array(<BR>
...<BR>
  "grouping"=>true,<BR>
  "groupingView"=>array(<BR>
    	"groupField" => array('CustomerID', 'OrderDate'),<BR>
    	"groupColumnShow" => array(true, true),<BR>
    	"groupText" =>array('<b>{0}</b>', '{0}'),<BR>
    	"groupSummary" => array(true, true)<BR>
   ) <BR>
));<BR>
</P>
		</TD>
		<TD>
			<P ALIGN=LEFT>null</P>
		</TD>
	</TR>

</TABLE>
<br>

</div>


</div><hr />
<div class="footer">
	Last Updated: 06/19/12 | 
	&copy TriRand Ltd, 2012
</div>
<br class="clear" />
<br />
</body>
</html>